import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";

const Dashboard = () => {
  const [activeTab, setActiveTab] = useState("job");

  const renderContent = () => {
    switch (activeTab) {
      case "job":
        return <JobStatus />;
      case "excel":
        return <ExcelSheet />;
      case "notes":
        return <Notes />;
      default:
        return null;
    }
  };

  return (
    <div className="grid grid-cols-4 h-screen">
      <div className="col-span-1 bg-gray-100 p-4 shadow-xl">
        <h2 className="text-xl font-bold mb-4">Hello User</h2>
        <div className="flex flex-col gap-2">
          <Button variant="outline" onClick={() => setActiveTab("job")}>Job Status</Button>
          <Button variant="outline" onClick={() => setActiveTab("excel")}>Excel Sheet</Button>
          <Button variant="outline" onClick={() => setActiveTab("notes")}>Notes</Button>
        </div>
      </div>
      <div className="col-span-3 p-6 bg-white">
        {renderContent()}
      </div>
    </div>
  );
};

const JobStatus = () => {
  const [xCode, setXCode] = useState(null);

  // Simulating fetching xCode from Python backend
  React.useEffect(() => {
    const fetchXCode = async () => {
      // Replace this with actual API call to Python backend
      const response = await new Promise((res) => setTimeout(() => res("X123-456"), 500));
      setXCode(response);
    };
    fetchXCode();
  }, []);

  return (
    <Card>
      <CardContent>
        <h3 className="text-lg font-semibold mb-2">Job Status</h3>
        {xCode ? <p>Code from Python: {xCode}</p> : <p>Loading...</p>}
      </CardContent>
    </Card>
  );
};

const ExcelSheet = () => {
  return (
    <Card>
      <CardContent>
        <h3 className="text-lg font-semibold mb-2">Excel Sheet</h3>
        <p>Display or upload Excel sheet here.</p>
      </CardContent>
    </Card>
  );
};

const Notes = () => {
  return (
    <Card>
      <CardContent>
        <h3 className="text-lg font-semibold mb-2">Notes</h3>
        <textarea className="w-full h-48 p-2 border rounded" placeholder="Write your notes here..." />
      </CardContent>
    </Card>
  );
};

export default Dashboard;









from flask import Flask, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)  # Enable CORS for cross-origin requests

@app.route('/api/job-status')
def get_job_status():
    return jsonify({"x_code": "X123-456"})

if __name__ == '__main__':
    app.run(debug=True)
















# This is a simple Streamlit UI that displays job and Jira statuses dynamically.
import streamlit as st
import random

st.set_page_config(page_title="Task Stats Dashboard", layout="wide")

# Simulated backend logic (can be replaced with actual data sources)
def fetch_job_status():
    return {
        "running": 12,
        "completed": 34,
        "running_percent": 60,
        "completed_percent": 85
    }

def fetch_jira_status():
    return {
        "open": 18,
        "closed": 42,
        "open_percent": 45,
        "closed_percent": 70
    }

# Layout starts here
st.title("Task Stats Dashboard")

# Split layout into 3 columns
left, center, right = st.columns([1, 2, 1])

# Left Sidebar - Job and Jira Status
with left:
    st.subheader("Job Status")
    job_status = fetch_job_status()
    st.text("Running Jobs")
    st.progress(job_status["running_percent"])
    st.text(f"{job_status['running']} jobs")

    st.text("Completed Jobs")
    st.progress(job_status["completed_percent"])
    st.text(f"{job_status['completed']} jobs")

    st.subheader("Jira Status")
    jira_status = fetch_jira_status()
    st.text("Open Issues")
    st.progress(jira_status["open_percent"])
    st.text(f"{jira_status['open']} issues")

    st.text("Closed Issues")
    st.progress(jira_status["closed_percent"])
    st.text(f"{jira_status['closed']} issues")

# Center Chart - Simulated Activity
with center:
    st.subheader("My Activity")
    import pandas as pd
    import altair as alt

    data = pd.DataFrame({
        "Date": pd.date_range("2025-11-07", periods=7, freq='D'),
        "Activity": [40, 65, 50, 70, 90, 45, 60]
    })

    chart = alt.Chart(data).mark_bar(cornerRadiusTopLeft=5, cornerRadiusTopRight=5).encode(
        x='Date:T',
        y='Activity:Q',
        tooltip=['Date:T', 'Activity:Q']
    ).properties(height=300)

    st.altair_chart(chart, use_container_width=True)

# Right Sidebar - Mirror of Left
with right:
    st.subheader("Job Status")
    st.text("Running Jobs")
    st.progress(job_status["running_percent"])
    st.text(f"{job_status['running']} jobs")

    st.text("Completed Jobs")
    st.progress(job_status["completed_percent"])
    st.text(f"{job_status['completed']} jobs")

    st.subheader("Jira Status")
    st.text("Open Issues")
    st.progress(jira_status["open_percent"])
    st.text(f"{jira_status['open']} issues")

    st.text("Closed Issues")
    st.progress(jira_status["closed_percent"])
    st.text(f"{jira_status['closed']} issues")







