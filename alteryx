import pandas as pd
import numpy as np
from typing import Dict, List, Optional
import networkx as nx
import matplotlib.pyplot as plt

class AlteryxPython:
    def __init__(self):
        self.workflow = nx.DiGraph()
        self.data_storage = {}
        self.tools = {
            'Input': self.input_tool,
            'Output': self.output_tool,
            'Select': self.select_tool,
            'Filter': self.filter_tool,
            'Join': self.join_tool,
            'Union': self.union_tool,
            'Formula': self.formula_tool,
            'Summarize': self.summarize_tool,
            'Sort': self.sort_tool,
            'Sample': self.sample_tool
        }
    
    def add_tool(self, tool_type: str, tool_id: str, params: dict, 
                 connections: Optional[List[str]] = None):
        """Add a tool to the workflow"""
        self.workflow.add_node(tool_id, type=tool_type, params=params)
        if connections:
            for conn in connections:
                self.workflow.add_edge(conn, tool_id)
    
    def run_workflow(self):
        """Execute the workflow in topological order"""
        for node in nx.topological_sort(self.workflow):
            tool_type = self.workflow.nodes[node]['type']
            params = self.workflow.nodes[node]['params']
            
            # Get input data from predecessors
            input_data = []
            for pred in self.workflow.predecessors(node):
                if pred in self.data_storage:
                    input_data.append(self.data_storage[pred])
            
            # Run the tool
            result = self.tools[tool_type](*input_data, **params)
            
            # Store the result
            self.data_storage[node] = result
    
    # Tool implementations
    def input_tool(self, file_path: str, **kwargs) -> pd.DataFrame:
        """Read data from a file"""
        if file_path.endswith('.csv'):
            return pd.read_csv(file_path, **kwargs)
        elif file_path.endswith('.xlsx'):
            return pd.read_excel(file_path, **kwargs)
        else:
            raise ValueError("Unsupported file format")
    
    def output_tool(self, data: pd.DataFrame, file_path: str, **kwargs):
        """Write data to a file"""
        if file_path.endswith('.csv'):
            data.to_csv(file_path, **kwargs)
        elif file_path.endswith('.xlsx'):
            data.to_excel(file_path, **kwargs)
        else:
            raise ValueError("Unsupported file format")
        return data  # Pass through
    
    def select_tool(self, data: pd.DataFrame, fields: List[str]) -> pd.DataFrame:
        """Select specific columns"""
        return data[fields]
    
    def filter_tool(self, data: pd.DataFrame, condition: str) -> pd.DataFrame:
        """Filter rows based on condition"""
        return data.query(condition)
    
    def join_tool(self, left: pd.DataFrame, right: pd.DataFrame, 
                 how: str = 'inner', on: Optional[List[str]] = None, 
                 left_on: Optional[List[str]] = None, 
                 right_on: Optional[List[str]] = None) -> pd.DataFrame:
        """Join two datasets"""
        return pd.merge(left, right, how=how, on=on, left_on=left_on, right_on=right_on)
    
    def union_tool(self, *datasets: pd.DataFrame) -> pd.DataFrame:
        """Stack datasets vertically"""
        return pd.concat(datasets, axis=0)
    
    def formula_tool(self, data: pd.DataFrame, expressions: Dict[str, str]) -> pd.DataFrame:
        """Add calculated columns"""
        df = data.copy()
        for col, expr in expressions.items():
            df[col] = df.eval(expr)
        return df
    
    def summarize_tool(self, data: pd.DataFrame, groupby: List[str], 
                      aggregations: Dict[str, List[str]]) -> pd.DataFrame:
        """Group and aggregate data"""
        return data.groupby(groupby).agg(aggregations)
    
    def sort_tool(self, data: pd.DataFrame, by: List[str], 
                 ascending: List[bool] = None) -> pd.DataFrame:
        """Sort data"""
        return data.sort_values(by=by, ascending=ascending)
    
    def sample_tool(self, data: pd.DataFrame, n: int = None, 
                   frac: float = None, random_state: int = None) -> pd.DataFrame:
        """Sample rows from data"""
        return data.sample(n=n, frac=frac, random_state=random_state)
    
    def visualize_workflow(self):
        """Visualize the workflow"""
        pos = nx.spring_layout(self.workflow)
        nx.draw(self.workflow, pos, with_labels=True, node_size=2000, node_color='skyblue')
        plt.show()






# Initialize the application
ap = AlteryxPython()

# Build a workflow
ap.add_tool('Input', 'input1', {'file_path': 'customers.csv'})
ap.add_tool('Input', 'input2', {'file_path': 'orders.csv'})
ap.add_tool('Join', 'join1', {'how': 'left', 'on': ['customer_id']}, ['input1', 'input2'])
ap.add_tool('Filter', 'filter1', {'condition': 'order_amount > 100'}, ['join1'])
ap.add_tool('Summarize', 'summarize1', 
           {'groupby': ['customer_id'], 
            'aggregations': {'order_amount': ['sum', 'count']}}, 
           ['filter1'])
ap.add_tool('Output', 'output1', {'file_path': 'results.csv'}, ['summarize1'])

# Visualize the workflow
ap.visualize_workflow()

# Execute the workflow
ap.run_workflow()
