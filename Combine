
let
    // STEP 1: Load the tables
    LOG_STATUS = Excel.CurrentWorkbook(){[Name="LOG_STATUS"]}[Content],
    ToolList = Excel.CurrentWorkbook(){[Name="ToolList"]}[Content],

    // STEP 2: Clean ToolList and build a dictionary
    CleanToolList = Table.TransformColumns(ToolList, {{"Tool ID", Text.Trim, type text}, {"Tool Name", Text.Trim, type text}}),
    ToolRows = Table.ToRows(CleanToolList),
    ToolDict = List.Accumulate(ToolRows, [], (state, row) => Record.AddField(state, row{0}, row{1})),

    // STEP 3: Add new column to LOG_STATUS based on Error1
    AddEnhancedError1 = Table.AddColumn(LOG_STATUS, "Error1 With Tool Name", each
        let
            OriginalError = [Error1],
            ErrorParts = Text.Split(OriginalError, ";"),
            TransformedParts = List.Transform(ErrorParts, each
                let
                    part = Text.Trim(_),
                    toolStart = Text.PositionOf(part, "ToolId "),
                    result =
                        if toolStart >= 0 then
                            let
                                afterToolId = Text.Middle(part, toolStart + 7), // skip "ToolId "
                                toolNum = Text.Select(Text.Start(afterToolId, 6), {"0".."9"}), // capture digits only (max 6 characters)
                                fullId = "ToolId " & toolNum,
                                toolName = Record.FieldOrDefault(ToolDict, fullId, "Tool Not Found"),
                                newText = Text.Replace(part, fullId, fullId & "(Tool Name: " & toolName & ")")
                            in
                                newText
                        else
                            part
                in
                    result
            ),
            FinalError = Text.Combine(TransformedParts, "; ")
        in
            FinalError
    )
in
    AddEnhancedError1










let
    // Step 1: Base tables
    Source = LOG_STATUS,
    ToolList = ToolList,  // Already loaded table

    // Step 2: Parse each error block (split by ;) and extract ToolId + message
    AddParsed = Table.AddColumn(Source, "ErrorParsed", each 
        let
            errorText = Text.Replace([Error], "#(cr)#(lf)", " "),  // Normalize line breaks
            splitErrors = Text.Split(errorText, ";"),
            cleanedList = List.Transform(splitErrors, each Text.Trim(_)),
            parsedList = List.Transform(cleanedList, each 
                let
                    match = Text.RegexMatch(_, "ToolId (\d+): (.+)"),
                    toolId = try Number.From(match{0}{1}) otherwise null,
                    message = try match{0}{2} otherwise null
                in
                    [ToolId=toolId, Message=message]
            )
        in
            List.RemoveNulls(parsedList)
    ),

    // Step 3: Expand rows and match tool names
    Expanded = Table.ExpandListColumn(AddParsed, "ErrorParsed"),
    ExpandedCols = Table.ExpandRecordColumn(Expanded, "ErrorParsed", {"ToolId", "Message"}),

    // Step 4: Merge with ToolList
    Joined = Table.NestedJoin(ExpandedCols, {"Job Name", "ToolId"}, ToolList, {"Job Name", "Tool ID"}, "ToolInfo", JoinKind.LeftOuter),
    ExpandedTools = Table.ExpandTableColumn(Joined, "ToolInfo", {"Tool Name"}),

    // Step 5: Format result string
    AddFormatted = Table.AddColumn(ExpandedTools, "FormattedLine", each 
        "Error ToolId " & Text.From([ToolId]) & 
        (if [Tool Name] <> null then " (Tool Name: " & [Tool Name] & ")" else "") & 
        ": " & [Message]
    ),

    // Step 6: Group back and join into original table
    Grouped = Table.Group(AddFormatted, {"Job Name"}, {
        {"Error1", each Text.Combine([FormattedLine], "#(lf)"), type text}
    }),

    MergeBack = Table.NestedJoin(Source, {"Job Name"}, Grouped, {"Job Name"}, "GroupJoin", JoinKind.LeftOuter),
    AddError1 = Table.AddColumn(MergeBack, "Error1", each try [GroupJoin]{0}[Error1] otherwise null),
    Result = Table.RemoveColumns(AddError1, {"GroupJoin"})
in
    Result


IF StartsWith([YourColumn], "ABC") THEN 
    RIGHT([YourColumn], Length([YourColumn]) - 3) 
ELSE 
    [YourColumn] 
ENDIF





IF StartsWith([YourColumn], "ABC") THEN 
    IIF(EndsWith([YourColumn], ".yxmd"), 
        LEFT(RIGHT([YourColumn], Length([YourColumn]) - 3), Length([YourColumn]) - 3 - 5), 
        RIGHT([YourColumn], Length([YourColumn]) - 3)
    )
ELSE 
    IIF(EndsWith([YourColumn], ".yxmd"), 
        LEFT([YourColumn], Length([YourColumn]) - 5), 
        [YourColumn]
    )
ENDIF


// Remove first 31 characters
IF Length([YourColumn]) > 31 THEN 
    [YourColumn] = RIGHT([YourColumn], Length([YourColumn]) - 31)
ENDIF;

// Remove .yxmd from end if present
IF EndsWith([YourColumn], ".yxmd") THEN 
    [YourColumn] = LEFT([YourColumn], Length([YourColumn]) - 5)
ENDIF;


IF Right([Job Name], 5) = ".yxmd" THEN
    Left([Job Name], Length([Job Name]) - 5)
ELSE
    [Job Name]
ENDIF
