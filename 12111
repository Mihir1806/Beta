import pandas as pd

# Step 1. Load all three files
bs = pd.read_excel("HK_BS_JUN2512356789.xlsx")       # Balance Sheet
net = pd.read_excel("HONGKONG_A2709T.xlsx")          # Netting HD/HE
saga = pd.read_excel("SAGA_MAPPING.xlsx")            # New SAGA mapping file

# --------------------------
# Step 2. Handle first (HD/HE) netting logic
# --------------------------
net_single = net[net['15772'] == 1].copy()
net_single_he = net_single[['A1010HE', 'A6000HE', '15772']].rename(
    columns={'A1010HE': 'A1010', 'A6000HE': 'A6000'}
)
net_single_hd = net_single[['A1010HD', 'A6000HD', '15772']].rename(
    columns={'A1010HD': 'A1010', 'A6000HD': 'A6000'}
)
net_single_combined = pd.concat([net_single_he, net_single_hd], ignore_index=True)
net_single_combined['LEG_TYPE'] = 'LEG'

net_double = net[net['15772'] == 2].copy()
leg1 = net_double[['A1010HE', 'A6000HE', '15772']].rename(
    columns={'A1010HE': 'A1010', 'A6000HE': 'A6000'}
)
leg1['LEG_TYPE'] = 'LEG 1'

leg2 = net_double[['A1010HD', 'A6000HD', '15772']].rename(
    columns={'A1010HD': 'A1010', 'A6000HD': 'A6000'}
)
leg2['LEG_TYPE'] = 'LEG 2'

net_final = pd.concat([net_single_combined, leg1, leg2], ignore_index=True)

# --------------------------
# Step 3. Handle second (SAGA) mapping logic
# --------------------------
def saga_leg(row):
    if row['98762'] == 2:
        if pd.notna(row['98763']):
            return 'LEG 1'
        elif pd.notna(row['07390P']):
            return 'LEG 2'
    return 'LEG'

# Flatten SAGA table for merging
saga_leg1 = saga[['98763', '98762']].rename(columns={'98763': 'SAGA-B35M'})
saga_leg1['LEG_TYPE'] = 'LEG 1'

saga_leg2 = saga[['07390P', '98762']].rename(columns={'07390P': 'SAGA-B35M'})
saga_leg2['LEG_TYPE'] = 'LEG 2'

saga_leg_combined = pd.concat([saga_leg1, saga_leg2], ignore_index=True)
saga_leg_combined.loc[saga_leg_combined['98762'] != 2, 'LEG_TYPE'] = 'LEG'

# --------------------------
# Step 4. Merge everything to Balance Sheet
# --------------------------
bs_merge1 = bs.merge(net_final[['A1010', 'A6000', 'LEG_TYPE']],
                     on=['A1010', 'A6000'], how='left')

bs_final = bs_merge1.merge(saga_leg_combined[['SAGA-B35M', 'LEG_TYPE']],
                           on='SAGA-B35M', how='left', suffixes=('', '_SAGA'))

# --------------------------
# Step 5. Consolidate final LEG_TYPE column
# --------------------------
bs_final['LEG_TYPE_FINAL'] = bs_final['LEG_TYPE'].combine_first(bs_final['LEG_TYPE_SAGA'])

# --------------------------
# ✅ Step 6. Add 1984DT (i987) Group-By Logic
# --------------------------
# Explanation:
#   If 98762 == 1 → group by 07390P only
#   If 98762 == 2 → group by both 07390P and 98763 of the same row

# make safe string types
bs_final[['07390P', '98763', '98762']] = bs_final[['07390P', '98763', '98762']].fillna('').astype(str)

def make_group_key(row):
    if row['98762'] == '1':
        return tuple([row['07390P']])
    elif row['98762'] == '2':
        return tuple([row['07390P'], row['98763']])
    else:
        return tuple([row['07390P']])

bs_final['GROUP_KEY'] = bs_final.apply(make_group_key, axis=1)

# Perform the groupby sum by CONTRACT REFERENCE + GROUP_KEY
if 'CONTRACT REFERENCE' in bs_final.columns and 'IAS REPORTING AMOUNT/REP_CURR' in bs_final.columns:
    bs_final['GROUP_TOTAL_I987'] = (
        bs_final.groupby(['CONTRACT REFERENCE', 'GROUP_KEY'])['IAS REPORTING AMOUNT/REP_CURR']
        .transform('sum')
    )

# --------------------------
# Step 7. Save safely
# --------------------------
bs_final.to_excel("HK_BS_JUN2512356789_with_all_legs_i987.xlsx", index=False)

print("✅ Done! File created: HK_BS_JUN2512356789_with_all_legs_i987.xlsx")