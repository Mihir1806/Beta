def parent_child(self):
    import pandas as pd

    try:
        # ✅ Step 1: Build Code to Ancestor Map using Niv hierarchy
        code_to_ancestors = {}

        for _, row in self.SubProduct.iterrows():
            code = str(row['Code']).strip() if pd.notna(row['Code']) else None
            if not code:
                continue

            # Collect all niv columns as potential ancestors
            ancestors = []
            for i in range(1, 7):
                niv_col = f'Niv {i}'
                niv_val = row.get(niv_col)
                if pd.notna(niv_val):
                    # Find matching code(s) in SubProduct having same niv description
                    matching_rows = self.SubProduct[self.SubProduct[niv_col] == niv_val]
                    for _, match_row in matching_rows.iterrows():
                        parent_code = str(match_row['Code']).strip()
                        if parent_code != code:
                            ancestors.append(parent_code)

            code_to_ancestors[code] = list(set(ancestors))

        # ✅ Step 2: Check if 'Type of operation' is in ancestor list of 'SubProductIAS'
        def has_parent_match(row):
            try:
                child_code = str(row['SubProductIAS']).strip()
                parent_code = str(row['Type of operation']).strip()
                ancestors = code_to_ancestors.get(child_code, [])
                return parent_code in ancestors
            except Exception:
                return False

        # ✅ Step 3: Apply to result3 and split
        self.result3.loc[:, 'parent_match'] = self.result3.apply(has_parent_match, axis=1)

        self.result3A = self.result3[self.result3['parent_match']].drop(columns=['parent_match'])
        self.result3B = self.result3[~self.result3['parent_match']].drop(columns=['parent_match'])

        print("✅ parent_child: result3 successfully split into result3A (ancestral match) and result3B (no match).")

    except Exception as e:
        print(f"⚠️ Error in parent_child(): {str(e).encode('ascii', 'ignore').decode('ascii')}")