let
    errorText = [Error],  // Original error text
    jobName = [Job Name],  // Job name to filter the tool list

    // Step 1: Break Error Text into Words
    wordList = 
        if errorText <> null then 
            Text.SplitAny(errorText, " ,;:.") 
        else 
            {},

    // Step 2: Pick only words that start with "ToolId"
    toolIdWords = 
        List.Select(wordList, each Text.StartsWith(Text.Trim(_), "ToolId")),

    // Step 3: Create a list of Tool IDs and Tool Names from the ToolList
    toolListFiltered = 
        Table.SelectRows(ToolList, each Text.Trim([Job Name]) = Text.Trim(jobName)),  // Trim Job Name for comparison
    toolIdToNameList = 
        List.Transform(toolListFiltered[Tool ID], each 
            [ToolId = Text.Trim([Tool ID]), ToolName = Text.Trim([Tool Name])]),  // Trim Tool ID and Tool Name

    // Step 4: Prepare the transformed list of Tool ID replacements
    transformToolIds = 
        List.Transform(toolIdWords, each 
            let
                toolIdFull = Text.Trim(_),   // "ToolId 2501"
                toolIdNumber = Text.Trim(Text.AfterDelimiter(toolIdFull, "ToolId ")), // Extract just "2501"
                
                // Custom lookup function to find the Tool Name
                toolNameFound = 
                    let
                        matchedTool = List.First(List.Select(toolIdToNameList, each Text.Trim(Text.AfterDelimiter(_[ToolId], "ToolId ")) = toolIdNumber), null)
                    in
                        if matchedTool <> null then matchedTool[ToolName] else null,

                replacementText = if toolNameFound <> null then toolIdFull & " (Tool Name - " & toolNameFound & ")" else toolIdFull
            in
                [Original = toolIdFull, Replacement = replacementText]
        ),

    // Step 5: Replace Tool IDs with their corresponding Tool Names in the error text
    updatedError = 
        List.Accumulate(transformToolIds, errorText, (state, current) => Text.Replace(state, current[Original], current[Replacement]))
in
    updatedError







let
    errorText = [Error],  // Original error text
    jobName = [Job Name],  // Job name to filter the tool list

    // Step 1: Break Error Text into Words
    wordList = 
        if errorText <> null then 
            Text.SplitAny(errorText, " ,;:.") 
        else 
            {},

    // Step 2: Pick only words that start with "ToolId"
    toolIdWords = 
        List.Select(wordList, each Text.StartsWith(Text.Trim(_), "ToolId")),

    // Step 3: Create a list of Tool IDs and Tool Names from the ToolList
    toolListFiltered = 
        Table.SelectRows(ToolList, each [Job Name] = jobName),
    toolIdToNameList = 
        List.Transform(toolListFiltered[Tool ID], each 
            [ToolId = Text.From([Tool ID]), ToolName = [Tool Name]]),

    // Step 4: Prepare the transformed list of Tool ID replacements
    transformToolIds = 
        List.Transform(toolIdWords, each 
            let
                toolIdFull = Text.Trim(_),   // "ToolId 2501"
                toolIdNumber = Text.Trim(Text.AfterDelimiter(toolIdFull, "ToolId ")), // Extract just "2501"
                
                // Custom lookup function to find the Tool Name
                toolNameFound = 
                    try 
                        List.First(List.Select(toolIdToNameList, each _[ToolId] = toolIdNumber))[ToolName] 
                    otherwise null,

                replacementText = if toolNameFound <> null then toolIdFull & " (Tool Name - " & toolNameFound & ")" else toolIdFull
            in
                [Original = toolIdFull, Replacement = replacementText]
        ),

    // Step 5: Replace Tool IDs with their corresponding Tool Names in the error text
    updatedError = 
        List.Accumulate(transformToolIds, errorText, (state, current) => Text.Replace(state, current[Original], current[Replacement]))
in
    updatedError












let
    errorText = [Error],
    jobName = [Job Name],

    // Step 1: Break Error Text into Words
    wordList = 
        if errorText <> null then 
            Text.SplitAny(errorText, " ,;:.") 
        else 
            {},

    // Step 2: Pick only words that start with "ToolId"
    toolIdWords = 
        List.Select(wordList, each Text.StartsWith(Text.Trim(_), "ToolId")),

    // Step 3: Prepare replacements
    transformToolIds = 
        List.Transform(toolIdWords, each 
            let
                toolIdFull = Text.Trim(_),   // "ToolId 2501"
                toolIdNumber = Text.Trim(Text.AfterDelimiter(toolIdFull, "ToolId ")), // Extract just "2501"
                
                filteredTool = Table.SelectRows(ToolList, each [Job Name] = jobName and Text.From([Tool ID]) = toolIdNumber),
                toolNameFound = if Table.RowCount(filteredTool) > 0 then filteredTool{0}[Tool Name] else null,
                replacementText = if toolNameFound <> null then toolIdFull & " (Tool Name- " & toolNameFound & ")" else toolIdFull
            in
                [Original = toolIdFull, Replacement = replacementText]
        ),

    // Step 4: Replace in the Error Text
    updatedError = 
        List.Accumulate(transformToolIds, errorText, (state, current) => Text.Replace(state, current[Original], current[Replacement]))
in
    updatedError






let
    errorText = [Error],
    jobName = [Job Name],

    // Step 1: Break Error Text into Words
    wordList = 
        if errorText <> null then 
            Text.SplitAny(errorText, " ,;:.") 
        else 
            {},

    // Step 2: Pick only words that start with "ToolId"
    toolIdWords = 
        List.Select(wordList, each Text.StartsWith(Text.Trim(_), "ToolId")),

    // Step 3: Prepare replacements
    transformToolIds = 
        List.Transform(toolIdWords, each 
            let
                toolIdFull = Text.Trim(_),   // "ToolId 451"
                filteredTool = Table.SelectRows(ToolList, each [Job Name] = jobName and [Tool ID] = toolIdFull),
                toolNameFound = if Table.RowCount(filteredTool) > 0 then filteredTool{0}[Tool Name] else null,
                replacementText = if toolNameFound <> null then toolIdFull & " (Tool Name- " & toolNameFound & ")" else toolIdFull
            in
                [Original = toolIdFull, Replacement = replacementText]
        ),

    // Step 4: Replace in the Error Text
    updatedError = 
        List.Accumulate(transformToolIds, errorText, (state, current) => Text.Replace(state, current[Original], current[Replacement]))
in
    updatedError













let
    errorText = [Error],
    jobName = [Job Name],
    toolIdMatches = 
        if errorText <> null then
            let
                extractAll = Text.RegexReplace(errorText, "([Tt]ool[Ii]d\s\d+)", "#(tab)\1"),
                splitList = Text.Split(extractAll, "#(tab)"),
                cleanExtract = List.Select(List.Transform(splitList, each Text.Trim(_)), each Text.StartsWith(_, "ToolId"))
            in
                cleanExtract
        else
            {},
    transformToolIds = 
        List.Transform(toolIdMatches, each 
            let
                toolIdFull = _,   // Already "ToolId 451"
                filteredTool = Table.SelectRows(ToolList, each [Job Name] = jobName and [Tool ID] = toolIdFull),
                toolNameFound = if Table.RowCount(filteredTool) > 0 then filteredTool{0}[Tool Name] else null,
                replacementText = if toolNameFound <> null then toolIdFull & " (Tool Name- " & toolNameFound & ")" else toolIdFull
            in
                [Original = toolIdFull, Replacement = replacementText]
        ),
    updatedError = 
        List.Accumulate(transformToolIds, errorText, (state, current) => Text.Replace(state, current[Original], current[Replacement]))
in
    updatedError










let
    errorText = [Error],
    jobName = [Job Name],
    toolIdMatches = 
        if errorText <> null then
            let
                matches = Text.RegexReplace(errorText, ".*?(ToolId\s\d+).*", "$1"),
                allMatches = Text.RegexReplace(errorText, ".*?(ToolId\s\d+).*", "$1"),
                allToolIds = Text.RegexReplace(errorText, ".*?(ToolId\s\d+).*", "$1"),
                extractAll = List.Transform(Text.RegexReplace(errorText, "([Tt]ool[Ii]d\s\d+)", "#(tab)\1").Split("#(tab)"), Text.Trim),
                cleanExtract = List.Select(extractAll, each Text.StartsWith(_, "ToolId"))
            in
                cleanExtract
        else
            {},
    transformToolIds = 
        List.Transform(toolIdMatches, each 
            let
                toolIdFull = _,   // Already "ToolId 451"
                filteredTool = Table.SelectRows(ToolList, each [Job Name] = jobName and [Tool ID] = toolIdFull),
                toolNameFound = if Table.RowCount(filteredTool) > 0 then filteredTool{0}[Tool Name] else null,
                replacementText = if toolNameFound <> null then toolIdFull & " (Tool Name- " & toolNameFound & ")" else toolIdFull
            in
                [Original = toolIdFull, Replacement = replacementText]
        ),
    updatedError = 
        List.Accumulate(transformToolIds, errorText, (state, current) => Text.Replace(state, current[Original], current[Replacement]))
in
    updatedError






let 
    errorText = [Error],
    jobName = [Job Name],
    toolIdFound = 
        if errorText <> null and Text.Contains(errorText, "ToolId") then
            let
                afterToolId = Text.AfterDelimiter(errorText, "ToolId "),
                extractedId = Text.BeforeDelimiter(afterToolId, ":")
            in
                Text.Trim(extractedId)
        else
            null,
    toolIdFull = 
        if toolIdFound <> null then 
            "ToolId " & toolIdFound 
        else 
            null,
    toolRecord = 
        if toolIdFull <> null then
            let 
                filteredTool = Table.SelectRows(Tool_List, each [Job Name] = jobName and [Tool ID] = toolIdFull)
            in 
                if Table.RowCount(filteredTool) > 0 then 
                    filteredTool{0}[Tool Name]
                else 
                    null
        else
            null,
    updatedError = 
        if toolIdFull <> null and toolRecord <> null then
            Text.Replace(errorText, toolIdFull, toolIdFull & " (Tool Name- " & toolRecord & ")")
        else
            errorText
in
    updatedError


