from flask import Flask, request, render_template_string
import re

app = Flask(__name__)

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ helpers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ #
def spark_fmt(fmt: str) -> str:
    for k, v in {"%Y":"yyyy","%y":"yy","%m":"MM","%d":"dd",
                 "%H":"HH","%M":"mm","%S":"ss"}.items():
        fmt = fmt.replace(k, v)
    return fmt

def dt_add(expr: str, n: int, unit: str) -> str:
    unit = unit.lower()
    if unit.startswith('day'):
        return f"date_add({expr}, {n})" if n >= 0 else f"date_sub({expr}, {-n})"
    if unit.startswith('month'):
        return f"add_months({expr}, {n})"
    if unit.startswith('year'):
        return f"add_months({expr}, {n*12})"
    return expr

def dt_diff(a: str, b: str, unit: str) -> str:
    unit = unit.lower()
    if unit.startswith('day'):
        return f"DATEDIFF({a}, {b})"
    if unit.startswith('month'):
        return f"MONTHS_BETWEEN({a}, {b})"
    if unit.startswith('year'):
        return f"(MONTHS_BETWEEN({a}, {b})/12)"
    return f"DATEDIFF({a},{b})"

ARG = r'(?:[^,(]|\([^)]*\))+?'  # balanced-like first-arg matcher

add_rx  = re.compile(rf'DateTimeAdd\(\s*({ARG})\s*,\s*(-?\d+)\s*,\s*[\'"](days|months|years)[\'"]\s*\)', re.I)
diff_rx = re.compile(rf'DateTimeDiff\(\s*({ARG})\s*,\s*({ARG})\s*,\s*[\'"](days|months|years)[\'"]\s*\)', re.I)

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ converter â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ #
def convert(f: str) -> str:
    f = f.strip()
    while True:
        old = f
        f = re.sub(r'DateTimeNow\(\)',  "current_timestamp()",                      f, flags=re.I)
        f = re.sub(r'DateTimeToday\(\)',"current_date()",                           f, flags=re.I)
        f = re.sub(r'DateTimeFirstOfMonth\(\)', "date_trunc(\'month\', current_date())", f, flags=re.I)
        f = re.sub(r'DateTimeFirstOfMonth\(\s*([^)]+?)\s*\)', r"date_trunc('month', \1)", f, flags=re.I)
        f = re.sub(
            r'DateTimeFormat\(\s*([^\s,]+?)\s*,\s*"([^"]+)"\s*\)',
            lambda m: f"date_format({m.group(1)}, '{spark_fmt(m.group(2))}')", f, flags=re.I)

        f = add_rx.sub(lambda m: dt_add(m.group(1), int(m.group(2)), m.group(3)), f)
        f = diff_rx.sub(lambda m: dt_diff(m.group(1), m.group(2), m.group(3)), f)

        f = re.sub(r'I{1,2}F{1,2}\(\s*([^,]+?)\s*,\s*([^,]+?)\s*,\s*([^)]+?)\)',
                   r'CASE WHEN \1 THEN \2 ELSE \3 END', f, flags=re.I)
        f = re.sub(r'\bIf\s+(.+?)\s+Then\s+(.+?)\s+Else\s+(.+?)\s+EndIf\b',
                   r'CASE WHEN \1 THEN \2 ELSE \3 END', f, flags=re.I|re.S)

        f = re.sub(r'Trim\(\s*([^)]+?)\)',  r'TRIM(\1)', f, flags=re.I)
        f = re.sub(r'Len\(\s*([^)]+?)\)',   r'LENGTH(\1)', f, flags=re.I)
        f = re.sub(r'Left\(\s*([^,]+?)\s*,\s*([^)]+?)\)',  r'SUBSTRING(\1,1,\2)', f, flags=re.I)
        f = re.sub(r'Right\(\s*([^,]+?)\s*,\s*([^)]+?)\)', r'SUBSTRING(\1,LENGTH(\1)-\2+1,\2)', f, flags=re.I)
        f = re.sub(r'Contains\(\s*([^,]+?)\s*,\s*([^)]+?)\)', r'INSTR(\1,\2) > 0', f, flags=re.I)

        if f == old:
            break
    return f

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ui â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ #
HTML = '''
<!doctype html><html><head><title>Alteryxâ‡„Spark</title>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/codemirror.min.css">
<style>body{background:#1e1e2f;color:#eee;font-family:Arial;padding:40px}
.wrap{max-width:900px;margin:auto}h1{text-align:center;color:#00f0ff}
textarea,pre{width:100%;background:#2d2d3a;color:#fff;border:1px solid #444;
padding:10px;font-size:16px;border-radius:6px}button{padding:10px 20px;
font-size:16px;background:#00cec9;border:none;margin-top:10px;cursor:pointer}</style>
</head><body><div class="wrap">
<h1>ðŸ§  Alteryx â‡„ Spark SQL Converter</h1>
<form method="POST"><textarea id="txt" name="formula" rows="4">{{ form|e }}</textarea>
<button type="submit">Convert</button></form>{% if res %}<h3>Converted:</h3>
<pre>{{ res|e }}</pre>{% endif %}</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/sql/sql.min.js"></script>
<script>const ed=CodeMirror.fromTextArea(document.getElementById('txt'),
{lineNumbers:true,mode:'sql',theme:'default'});
document.querySelector('form').addEventListener('submit',()=>{document.getElementById('txt').value=ed.getValue();});
</script></body></html>
'''

@app.route("/", methods=["GET","POST"])
def main():
    inp=out=""
    if request.method=="POST":
        inp=request.form.get("formula","")
        out=convert(inp)
    return render_template_string(HTML, form=inp, res=out)

if __name__ == "__main__":
    app.run(debug=True)