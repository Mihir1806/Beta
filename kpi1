import tkinter as tk
from tkinter import ttk, filedialog
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from datetime import datetime, timedelta
import webbrowser
import os

# Main app window
root = tk.Tk()
root.title("Job Analytics Dashboard")
root.geometry("1100x700")
root.configure(bg="#1e1e1e")

# Global variables
dataframe = pd.DataFrame()

# Functions
def load_excel():
    global dataframe
    file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx *.xls")])
    if file_path:
        dataframe = pd.read_excel(file_path)
        dataframe['Received_Date'] = pd.to_datetime(dataframe['Received_Date']).dt.date
        filter_and_update('30 Days')

def filter_data(df, option):
    today = datetime.now().date()
    if option == 'Today':
        return df[df['Received_Date'] == today]
    elif option == '7 Days':
        return df[df['Received_Date'] >= today - timedelta(days=7)]
    elif option == '30 Days':
        return df[df['Received_Date'] >= today - timedelta(days=30)]
    else:
        return df

def filter_and_update(option):
    filtered_df = filter_data(dataframe, option)
    update_chart(filtered_df)
    update_table(filtered_df)

def update_chart(df):
    for widget in chart_frame.winfo_children():
        widget.destroy()

    if df.empty:
        return

    status_counts = df['status'].value_counts()
    labels = status_counts.index.tolist()
    sizes = status_counts.values
    colors = ['green' if label == 'Success' else 'red' for label in labels]

    fig, ax = plt.subplots(figsize=(4, 4), facecolor='#1e1e1e')
    wedges, texts, autotexts = ax.pie(
        sizes,
        labels=labels,
        colors=colors,
        autopct='%1.1f%%',
        startangle=90,
        pctdistance=0.85,
        textprops={'color': "white"}
    )
    centre_circle = plt.Circle((0, 0), 0.70, fc='#1e1e1e')
    fig.gca().add_artist(centre_circle)
    ax.axis('equal')

    canvas = FigureCanvasTkAgg(fig, master=chart_frame)
    canvas.draw()
    canvas.get_tk_widget().pack()

def update_table(df):
    for item in job_table.get_children():
        job_table.delete(item)
    for _, row in df.iterrows():
        job_table.insert('', 'end', values=(
            row['job_name'],
            row['status'],
            row['Execution_Time'],
            row['Path'],
            row['Received_Date']
        ))

def open_path(event):
    selected = job_table.selection()
    if not selected:
        return
    path = job_table.item(selected[0])['values'][3]
    if path.startswith("http"):
        webbrowser.open(path)
    else:
        try:
            os.startfile(path)
        except Exception as e:
            print(f"Error opening path: {e}")

# Layout
# Left Filter Panel
filter_frame = tk.Frame(root, bg="#1e1e1e")
filter_frame.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=10)

tk.Label(filter_frame, text="FILTER", fg="white", bg="#1e1e1e", font=("Arial", 14)).pack(pady=5)

for label in ['Today', '7 Days', '30 Days']:
    btn = tk.Button(filter_frame, text=label, command=lambda l=label: filter_and_update(l),
                    bg="#333", fg="white", relief=tk.RAISED)
    btn.pack(fill=tk.X, pady=5)

load_btn = tk.Button(filter_frame, text="Load Excel", command=load_excel,
                     bg="#444", fg="white", relief=tk.RAISED)
load_btn.pack(fill=tk.X, pady=20)

# Chart Frame
chart_frame = tk.Frame(root, bg="#1e1e1e")
chart_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

# Job Table Frame
table_frame = tk.Frame(root, bg="#1e1e1e")
table_frame.pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)

cols = ('job_name', 'status', 'Execution_Time', 'Path', 'Received_Date')
job_table = ttk.Treeview(table_frame, columns=cols, show='headings')

for col in cols:
    job_table.heading(col, text=col)
    job_table.column(col, anchor='w', width=200)

job_table.pack(fill=tk.BOTH, expand=True)
job_table.bind("<Double-1>", open_path)

# Style
style = ttk.Style()
style.configure("Treeview", background="#2e2e2e", foreground="white", fieldbackground="#2e2e2e")
style.configure("Treeview.Heading", background="#1e1e1e", foreground="white")

root.mainloop()