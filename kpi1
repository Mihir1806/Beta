import requests
import pandas as pd
import ssl
from datetime import datetime
from requests.adapters import HTTPAdapter
from urllib3.util.ssl_ import create_urllib3_context

# Custom adapter to enforce TLS 1.2+
class TLSAdapter(HTTPAdapter):
    def init_poolmanager(self, *args, **kwargs):
        context = create_urllib3_context()
        context.minimum_version = ssl.TLSVersion.TLSv1_2  # Enforce TLS 1.2+
        kwargs["ssl_context"] = context
        super().init_poolmanager(*args, **kwargs)

# Jira API details
JIRA_URL = "https://your-jira-instance.atlassian.net"
API_KEY = "your_api_key"
JQL_FILTER_ID = "your_filter_id"

# Initialize requests session with custom TLS adapter
session = requests.Session()
session.mount("https://", TLSAdapter())
session.headers.update({
    "Accept": "application/json",
    "Authorization": f"Basic {API_KEY}"
})

# Function to fetch data from Jira using a filter
def fetch_jira_issues():
    url = f"{JIRA_URL}/rest/api/3/search?filter={JQL_FILTER_ID}"
    try:
        response = session.get(url, timeout=10)
        response.raise_for_status()
        return response.json().get("issues", [])
    except requests.exceptions.SSLError as e:
        print("SSL Error:", e)
        return []
    except requests.exceptions.RequestException as e:
        print("Request Error:", e)
        return []

# Function to calculate KPIs
def calculate_kpis(issues):
    total_issues = len(issues)
    avg_resolution_time = 0
    resolved_issues = []
    
    for issue in issues:
        fields = issue.get("fields", {})
        if "resolutiondate" in fields:
            created = datetime.strptime(fields["created"], "%Y-%m-%dT%H:%M:%S.%f%z")
            resolved = datetime.strptime(fields["resolutiondate"], "%Y-%m-%dT%H:%M:%S.%f%z")
            resolution_time = (resolved - created).total_seconds() / 3600  # Hours
            resolved_issues.append(resolution_time)
    
    if resolved_issues:
        avg_resolution_time = sum(resolved_issues) / len(resolved_issues)
    
    return {"Total Issues": total_issues, "Avg Resolution Time (hrs)": avg_resolution_time}

# Function to save KPIs to Excel
def save_to_excel(kpi_data):
    df = pd.DataFrame([kpi_data])
    df.to_excel("jira_kpi_report.xlsx", index=False)
    print("KPI report saved to jira_kpi_report.xlsx")

if __name__ == "__main__":
    print("Fetching issues from Jira using filter...")
    issues = fetch_jira_issues()
    print("Input (Fetched Issues):", issues)
    
    if issues:
        print("Calculating KPIs...")
        kpi_data = calculate_kpis(issues)
        print("Output (Calculated KPIs):", kpi_data)
        
        print("Saving KPIs to Excel...")
        save_to_excel(kpi_data)
    else:
        print("No issues fetched. Please check Jira filter settings.")
