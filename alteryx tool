import xml.etree.ElementTree as ET
import pandas as pd
import os

def extract_alteryx_tools(file_path):
    """
    Parses an Alteryx workflow and extracts Tool ID and Tool Name.

    Args:
        file_path (str): Path to the .yxmd/.yxmc/.yxwz file.

    Returns:
        pd.DataFrame: DataFrame with columns ['Tool ID', 'Tool Name']
    """
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"File not found: {file_path}")

    try:
        tree = ET.parse(file_path)
        root = tree.getroot()

        tools = []
        for node in root.iter('Node'):
            tool_id = node.attrib.get('ToolID', '').strip()
            tool_name = node.attrib.get('Tool', '').strip()

            if tool_id and tool_name:
                tools.append({"Tool ID": tool_id, "Tool Name": tool_name})

        return pd.DataFrame(tools)

    except ET.ParseError as pe:
        raise ValueError(f"XML parsing error: {pe}")
    except Exception as e:
        raise RuntimeError(f"Failed to extract tools: {e}")

def save_tools_to_excel(df, output_file):
    """
    Saves the DataFrame to an Excel file.

    Args:
        df (pd.DataFrame): DataFrame with tool info.
        output_file (str): Output Excel filename.
    """
    df.to_excel(output_file, index=False)
    print(f"Tool list saved to: {output_file}")

if __name__ == "__main__":
    # Update the filename below as needed
    input_file = "MyWorkflow.yxmd"  # File should be in the same folder as this script
    output_file = "Alteryx_Tools_Extracted.xlsx"

    try:
        df_tools = extract_alteryx_tools(input_file)
        if df_tools.empty:
            print("No tools found in the workflow.")
        else:
            save_tools_to_excel(df_tools, output_file)
    except Exception as err:
        print(f"Error: {err}")