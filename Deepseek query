from flask import Flask, request, render_template_string
import re

app = Flask(__name__)

# ---------------- HTML FRONTEND -------------------
HTML_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>Alteryx ‚Üí Spark SQL Formula Converter</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body { background-color: #121212; color: white; }
        .form-control, .btn { border-radius: 0; }
        .container { max-width: 800px; margin-top: 50px; }
        textarea, pre { background-color: #1e1e1e; color: #00ffcc; }
    </style>
</head>
<body>
    <div class="container">
        <h2 class="mb-4">üîÅ Alteryx ‚ûú Spark SQL Converter</h2>
        <form method="post">
            <div class="mb-3">
                <label class="form-label">Enter Alteryx Formula:</label>
                <textarea class="form-control" name="alteryx_formula" rows="5">{{ alteryx_formula or '' }}</textarea>
            </div>
            <button type="submit" class="btn btn-success">Convert</button>
        </form>

        {% if spark_sql %}
        <div class="mt-4">
            <h4>‚úÖ Converted Spark SQL:</h4>
            <pre>{{ spark_sql }}</pre>
        </div>
        {% endif %}
    </div>
</body>
</html>
"""

# ------------------ LOGIC ------------------------

def convert_to_spark_sql(alteryx_expr):
    expr = alteryx_expr

    # Normalize quotes and spacing
    expr = expr.replace("‚Äò", "'").replace("‚Äô", "'").replace("‚Äú", '"').replace("‚Äù", '"')
    expr = expr.replace(" THEN ", " then ").replace(" ELSEIF ", " elseif ").replace(" ELSE ", " else ")

    # Replace functions
    expr = re.sub(r"\bToNumber\((.*?)\)", r"CAST(\1 AS DOUBLE)", expr, flags=re.IGNORECASE)
    expr = re.sub(r"\bToDate\((.*?)\)", r"TO_DATE(\1)", expr, flags=re.IGNORECASE)
    expr = re.sub(r"\bDateTimeFormat\((.*?),\s*['\"](.*?)['\"]\)", r"DATE_FORMAT(\1, '\2')", expr, flags=re.IGNORECASE)
    expr = re.sub(r"\bIIF\((.*?),\s*(.*?),\s*(.*?)\)", r"CASE WHEN \1 THEN \2 ELSE \3 END", expr, flags=re.IGNORECASE)

    # Replace Alteryx IF/ELSEIF/ELSE logic
    def convert_if_block(expr):
        expr = expr.strip()
        if not expr.upper().startswith("IF"):
            return expr

        # Handle nested conditions
        expr = expr.replace("ENDIF", "")
        lines = expr.splitlines()
        spark_lines = []
        for line in lines:
            line = line.strip()
            if line.upper().startswith("IF "):
                condition = line[3:].split(" THEN ")[0]
                result = line.split(" THEN ")[1]
                spark_lines.append(f"CASE WHEN {condition} THEN {result}")
            elif line.upper().startswith("ELSEIF "):
                condition = line[7:].split(" THEN ")[0]
                result = line.split(" THEN ")[1]
                spark_lines.append(f"WHEN {condition} THEN {result}")
            elif line.upper().startswith("ELSE "):
                result = line[5:]
                spark_lines.append(f"ELSE {result}")
            elif line.upper() == "ENDIF":
                continue
            else:
                spark_lines.append(line)
        spark_lines.append("END")
        return "\n".join(spark_lines)

    expr = convert_if_block(expr)

    # Replace brackets [Column] with Column
    expr = re.sub(r"\[([^\]]+)\]", r"\1", expr)

    # Clean up spacing
    expr = re.sub(r"\s{2,}", " ", expr).strip()

    return expr

# ---------------- ROUTE ------------------

@app.route("/", methods=["GET", "POST"])
def index():
    spark_sql = None
    alteryx_formula = None
    if request.method == "POST":
        alteryx_formula = request.form.get("alteryx_formula", "")
        spark_sql = convert_to_spark_sql(alteryx_formula)
    return render_template_string(HTML_TEMPLATE, alteryx_formula=alteryx_formula, spark_sql=spark_sql)

# ---------------- RUN ------------------

if __name__ == "__main__":
    app.run(debug=True)