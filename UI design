from flask import Flask, request, render_template_string, session
import re
from datetime import datetime

app = Flask(__name__)
app.secret_key = 'secret-key'

# ---------- Converters ----------

def convert_alteryx_to_spark(expr):
    expr = expr.strip()
    expr = re.sub(r'IIF\s*\(([^,]+),\s*([^,]+),\s*([^)]+)\)', r'CASE WHEN \1 THEN \2 ELSE \3 END', expr, flags=re.IGNORECASE)
    expr = expr.replace("ENDIF", "END")
    expr = re.sub(r'\bIF\b', 'CASE WHEN', expr, flags=re.IGNORECASE)
    expr = re.sub(r'\bTHEN\b', 'THEN', expr, flags=re.IGNORECASE)
    expr = re.sub(r'\bELSE\b', 'ELSE', expr, flags=re.IGNORECASE)
    replacements = {
        r'(?i)\bTrim\s*\(': 'TRIM(',
        r'\bLen\s*\(': 'LENGTH(',
        r'\bUpper\s*\(': 'UPPER(',
        r'\bLower\s*\(': 'LOWER(',
        r'\bReplace\s*\(': 'REPLACE(',
        r'(?i)Contains\s*\(([^,]+),\s*([^)]+)\)': r'INSTR(\1, \2) > 0',
        r'(?i)Left\s*\(([^,]+),\s*([^)]+)\)': r'SUBSTRING(\1, 1, \2)',
        r'(?i)Right\s*\(([^,]+),\s*([^)]+)\)': r'SUBSTRING(\1, LENGTH(\1) - \2 + 1, \2)',
        r'(?i)DateTimeNow\s*\(\s*\)': 'CURRENT_TIMESTAMP',
        r'(?i)DateTimeAdd\s*\(([^,]+),\s*([^,]+),\s*\'days\'\s*\)': r'DATE_ADD(\1, \2)',
        r'(?i)DateTimeDiff\s*\(([^,]+),\s*([^,]+),\s*\'days\'\s*\)': r'DATEDIFF(\1, \2)'
    }
    for pat, repl in replacements.items():
        expr = re.sub(pat, repl, expr)
    return expr.strip()

def convert_spark_to_alteryx(expr):
    expr = expr.strip()
    expr = re.sub(r'CASE WHEN (.*?) THEN (.*?) ELSE (.*?) END', r'IIF(\1, \2, \3)', expr, flags=re.IGNORECASE)
    expr = expr.replace('CURRENT_TIMESTAMP', 'DateTimeNow()')
    expr = re.sub(r'DATE_ADD\((.*?),\s*(.*?)\)', r'DateTimeAdd(\1, \2, \'days\')', expr)
    expr = re.sub(r'DATEDIFF\((.*?),\s*(.*?)\)', r'DateTimeDiff(\1, \2, \'days\')', expr)
    expr = re.sub(r'INSTR\((.*?),\s*(.*?)\) > 0', r'Contains(\1, \2)', expr)
    expr = re.sub(r'SUBSTRING\((.*?),\s*1,\s*(.*?)\)', r'Left(\1, \2)', expr)
    expr = re.sub(r'SUBSTRING\((.*?),\s*LENGTH\(\1\) - (.*?) \+ 1,\s*(.*?)\)', r'Right(\1, \3)', expr)
    return expr.strip()

def explain_formula(expr):
    explanation = []
    upper_expr = expr.upper()
    if "IIF" in upper_expr or "IF" in upper_expr:
        explanation.append("üß† Conditional logic (IF/IIF) used to return values based on conditions.")
    if "LEN" in upper_expr or "LENGTH" in upper_expr:
        explanation.append("üìè Measures the number of characters in a string.")
    if "TRIM" in upper_expr:
        explanation.append("‚úÇÔ∏è Trims whitespace from the beginning and end of a string.")
    if "CONTAINS" in upper_expr or "INSTR" in upper_expr:
        explanation.append("üîç Checks if a string contains a specific substring.")
    if "LEFT" in upper_expr:
        explanation.append("‚¨ÖÔ∏è Extracts characters from the left of the string.")
    if "RIGHT" in upper_expr:
        explanation.append("‚û°Ô∏è Extracts characters from the right of the string.")
    if "DATETIME" in upper_expr or "CURRENT_TIMESTAMP" in upper_expr:
        explanation.append("üïí Works with date and time values.")
    return "<br>".join(explanation) if explanation else "‚ÑπÔ∏è General formula using string/date functions."

# ---------- HTML UI ----------

HTML_TEMPLATE = '''
<!DOCTYPE html>
<html>
<head>
    <title>FormulaLab</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/sql/sql.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/codemirror.min.css">
    <style>
        body { background: #1e1e2f; color: #eee; font-family: sans-serif; padding: 30px; text-align: center; }
        h1 { color: #00cec9; }
        .editor { width: 80%; margin: auto; }
        textarea { display: none; }
        .CodeMirror { height: auto; background: #2e2e3e; color: #fff; font-size: 15px; }
        button { padding: 10px 20px; background: #00b894; border: none; color: white; cursor: pointer; margin: 10px; }
        select { padding: 6px; font-size: 15px; }
        .output, .history, .library, .explanation { margin-top: 30px; padding: 20px; background: #2d2d3a; border-radius: 10px; width: 80%; margin-left: auto; margin-right: auto; }
        .formula-box { text-align: left; margin-bottom: 10px; }
        .formula-box code { color: #81ecec; }
    </style>
</head>
<body>
    <h1>üß† FormulaLab: Alteryx ‚áÑ Spark SQL</h1>
    <form method="POST" id="formulaForm">
        <div class="editor"><textarea id="input_formula" name="input_formula">{{ input_formula }}</textarea></div>
        <br>
        <select name="direction">
            <option value="alteryx_to_spark" {% if direction == 'alteryx_to_spark' %}selected{% endif %}>Alteryx ‚Üí Spark SQL</option>
            <option value="spark_to_alteryx" {% if direction == 'spark_to_alteryx' %}selected{% endif %}>Spark SQL ‚Üí Alteryx</option>
        </select>
        <button type="submit">Convert</button>
    </form>

    {% if output_formula %}
    <div class="output">
        <h3>‚ú® Converted Formula:</h3>
        <code id="outputFormula">{{ output_formula }}</code><br>
        <button onclick="copyToClipboard('input_formula')">üìã Copy Input</button>
        <button onclick="copyToClipboard('outputFormula')">üìã Copy Output</button>
    </div>
    <div class="explanation">
        <h3>üß† Formula Explanation:</h3>
        <p>{{ explanation|safe }}</p>
    </div>
    {% endif %}

    <div class="library">
        <h3>üìö Formula Library (Examples)</h3>
        {% for label, example in library %}
            <div class="formula-box">
                <b>{{ label }}:</b> <code>{{ example }}</code>
                <form method="POST" style="display:inline;">
                    <input type="hidden" name="input_formula" value="{{ example }}">
                    <input type="hidden" name="direction" value="alteryx_to_spark">
                    <button type="submit">Try</button>
                </form>
            </div>
        {% endfor %}
    </div>

    <div class="history">
        <h3>üïí Conversion History</h3>
        {% for h in history %}
            <div class="formula-box"><code>{{ h }}</code></div>
        {% else %}
            <p>No history yet.</p>
        {% endfor %}
    </div>

<script>
    let editor = CodeMirror.fromTextArea(document.getElementById("input_formula"), {
        lineNumbers: true,
        mode: "sql",
        theme: "default"
    });

    // Ensure form submits editor value
    document.getElementById("formulaForm").addEventListener("submit", function () {
        document.getElementById("input_formula").value = editor.getValue();
    });

    function copyToClipboard(id) {
        let text = (id === 'input_formula') ? editor.getValue() : document.getElementById(id).innerText;
        navigator.clipboard.writeText(text).then(() => alert("Copied!"));
    }
</script>
</body>
</html>
'''

# ---------- Flask Route ----------

@app.route('/', methods=['GET', 'POST'])
def index():
    output_formula = ""
    input_formula = ""
    explanation = ""
    direction = "alteryx_to_spark"

    if 'history' not in session:
        session['history'] = []

    if request.method == 'POST':
        input_formula = request.form.get('input_formula', '').strip()
        direction = request.form.get('direction', 'alteryx_to_spark')
        output_formula = convert_alteryx_to_spark(input_formula) if direction == 'alteryx_to_spark' else convert_spark_to_alteryx(input_formula)
        explanation = explain_formula(input_formula)
        if input_formula:
            timestamp = datetime.now().strftime('%H:%M:%S')
            session['history'].insert(0, f"[{timestamp}] {direction}: {input_formula} ‚Üí {output_formula}")
            session.modified = True

    library = [
        ("Simple IF", 'IF [Sales] > 100 THEN "High" ELSE "Low" ENDIF'),
        ("Nested IIF", 'IIF([Age]>18, "Adult", IIF([Age]>12, "Teen", "Child"))'),
        ("Contains", 'Contains([Region], "East")'),
        ("Date Add", "DateTimeAdd([Date], 5, 'days')"),
        ("Length", "Len(Trim([Name]))"),
    ]

    return render_template_string(
        HTML_TEMPLATE,
        output_formula=output_formula,
        input_formula=input_formula,
        direction=direction,
        explanation=explanation,
        history=session.get('history', []),
        library=library
    )

# ---------- Run App ----------

if __name__ == '__main__':
    app.run(debug=True)