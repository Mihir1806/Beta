from flask import Flask, request, render_template_string
import re, html

app = Flask(__name__)

# ────────────────────────────────  CORE MAPS  ───────────────────────────── #

# 1️⃣  one-to-one function replacements (simple “rename”)
DIRECT_MAP = {
    "trim"         : "TRIM",
    "ltrim"        : "LTRIM",
    "rtrim"        : "RTRIM",
    "upper"        : "UPPER",
    "lower"        : "LOWER",
    "len"          : "LENGTH",
    "abs"          : "ABS",
    "ceil"         : "CEIL",
    "ceiling"      : "CEIL",
    "floor"        : "FLOOR",
    "sqrt"         : "SQRT",
    "exp"          : "EXP",
    "log"          : "LOG",
    "log10"        : "LOG10",
    "round"        : "ROUND",
    "power"        : "POWER",
    "regex_replace": "REGEXP_REPLACE",
    "regex_match"  : "RLIKE",
    # add more simple renames here …
}

# 2️⃣  custom pattern-to-lambda rules (complex transforms)
PATTERNS = [
    # DateTimeAdd(dt, n, 'days' | 'months' | 'years' | 'hours' | 'minutes')
    (
        re.compile(
            r'DateTimeAdd\s*\(\s*(?P<dt>[^,]+)\s*,\s*(?P<n>-?\d+)\s*,\s*["\'](?P<unit>[^"\']+)["\']\s*\)',
            flags=re.I
        ),
        lambda m: _convert_dt_add(m.group("dt"), int(m.group("n")), m.group("unit"))
    ),
    # DateTimeDiff(a,b,'days'|…)
    (
        re.compile(
            r'DateTimeDiff\s*\(\s*(?P<a>[^,]+)\s*,\s*(?P<b>[^,]+)\s*,\s*["\'](?P<unit>[^"\']+)["\']\s*\)',
            flags=re.I
        ),
        lambda m: _convert_dt_diff(m.group("a"), m.group("b"), m.group("unit"))
    ),
    # DateTimeFirstOfMonth([col]?)   → date_trunc('month', …)
    (
        re.compile(r'DateTimeFirstOfMonth\s*\(\s*(?P<arg>[^\)]*)\)', flags=re.I),
        lambda m: f"date_trunc('month', {m.group('arg') or 'current_date()'})"
    ),
    # DateTimeLastOfMonth([col]?)   → last_day(…)
    (
        re.compile(r'DateTimeLastOfMonth\s*\(\s*(?P<arg>[^\)]*)\)', flags=re.I),
        lambda m: f"last_day({m.group('arg') or 'current_date()'})"
    ),
    # DateTimeNow()  /  DateTimeToday()
    (
        re.compile(r'DateTimeNow\s*\(\s*\)', flags=re.I),
        lambda _: "current_timestamp()"
    ),
    (
        re.compile(r'DateTimeToday\s*\(\s*\)', flags=re.I),
        lambda _: "current_date()"
    ),
    # Contains(a,b)  → INSTR(a,b) > 0
    (
        re.compile(r'Contains\s*\(\s*([^,]+)\s*,\s*([^)]+)\)', flags=re.I),
        lambda m: f"INSTR({m.group(1)}, {m.group(2)}) > 0"
    ),
    # StartsWith(a,b) / EndsWith(a,b)
    (
        re.compile(r'StartsWith\s*\(\s*([^,]+)\s*,\s*([^)]+)\)', flags=re.I),
        lambda m: f"LEFT({m.group(1)}, LENGTH({m.group(2)})) = {m.group(2)}"
    ),
    (
        re.compile(r'EndsWith\s*\(\s*([^,]+)\s*,\s*([^)]+)\)', flags=re.I),
        lambda m: f"RIGHT({m.group(1)}, LENGTH({m.group(2)})) = {m.group(2)}"
    ),
    # Left / Right
    (
        re.compile(r'Left\s*\(\s*([^,]+)\s*,\s*([^)]+)\)', flags=re.I),
        lambda m: f"SUBSTRING({m.group(1)}, 1, {m.group(2)})"
    ),
    (
        re.compile(r'Right\s*\(\s*([^,]+)\s*,\s*([^)]+)\)', flags=re.I),
        lambda m: f"SUBSTRING({m.group(1)}, LENGTH({m.group(1)}) - {m.group(2)} + 1, {m.group(2)})"
    ),
]

# ───────────────────────────── HELPER FUNCTIONS ────────────────────────── #

def _convert_dt_add(dt: str, n: int, unit: str) -> str:
    u = unit.lower()
    if u in ("day", "days"):
        return f"date_add({dt}, {n})" if n >= 0 else f"date_sub({dt}, {-n})"
    if u in ("month", "months"):
        return f"add_months({dt}, {n})"
    if u in ("year", "years"):
        return f"add_months({dt}, {n * 12})"
    # hours / minutes use ANSI interval
    if u in ("hour", "hours"):
        return f"{dt} + INTERVAL {n} HOURS"
    if u in ("minute", "minutes"):
        return f"{dt} + INTERVAL {n} MINUTES"
    return f"{dt} /* TODO: +{n} {unit} */"

def _convert_dt_diff(a: str, b: str, unit: str) -> str:
    u = unit.lower()
    if u in ("day", "days"):
        return f"DATEDIFF({a}, {b})"
    if u in ("month", "months"):
        return f"MONTHS_BETWEEN({a}, {b})"
    if u in ("year", "years"):
        return f"(MONTHS_BETWEEN({a}, {b}) / 12)"
    return f"/* TODO: diff {unit} */"

# ─────────────────────────── MAIN CONVERTER ──────────────────────────── #

def convert_alteryx(expr: str) -> str:
    """Convert an Alteryx formula → Spark SQL (best effort)."""
    out = expr

    # 0. Conditional logic (IF / IIF / IFF) – handle recursively until no change
    while True:
        new = re.sub(
            r'\bI{1,2}F{1,2}\s*\(\s*([^,]+?)\s*,\s*([^,]+?)\s*,\s*([^)]+?)\s*\)',
            r'CASE WHEN \1 THEN \2 ELSE \3 END',
            out, flags=re.I
        )
        new = re.sub(
            r'\bIf\s+(.+?)\s+Then\s+(.+?)\s+Else\s+(.+?)\s+EndIf\b',
            r'CASE WHEN \1 THEN \2 ELSE \3 END',
            new, flags=re.I | re.S,
        )
        if new == out:
            break
        out = new

    # 1. Simple direct replacements (word-boundaries, case-insensitive)
    for alx, spark in DIRECT_MAP.items():
        out = re.sub(rf'\b{alx}\s*\(', f"{spark}(", out, flags=re.I)

    # 2. Apply pattern rules
    for regex, repl in PATTERNS:
        out = regex.sub(repl, out)

    # 3. Unknown Alteryx function helper (optional)
    out = re.sub(r'\b([A-Za-z_]\w*)\s*\(', lambda m:
                 DIRECT_MAP.get(m.group(1).lower(), m.group(1).upper()) + "("
                 if m.group(1).lower() in DIRECT_MAP else
                 m.group(0).rstrip("(") + " /* TODO */(", out)

    return out

# ────────────────────────────  FLASK UI  ────────────────────────────── #

HTML = '''
<!DOCTYPE html><html><head>
<title>Alteryx ⇄ Spark SQL</title>
<link rel="stylesheet" 
      href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/codemirror.min.css">
<style>
 body{background:#1e1e2f;color:#eee;font:16px/1.4 Arial;padding:32px}
 h1{color:#00cec9;text-align:center}
 .wrap{max-width:900px;margin:auto}
 .CodeMirror{height:auto;background:#2d2d3a;color:#fff;font-size:15px}
 textarea{display:block;width:100%;height:120px}
 select,button{padding:8px 14px;font-size:15px;margin:10px 0}
 pre{background:#2e2e3f;padding:16px;border-radius:6px;white-space:pre-wrap}
</style></head><body>
<div class="wrap">
  <h1>🧠 Alteryx ⇄ Spark-SQL Converter</h1>
  <form id="fm" method="POST">
    <textarea id="txt" name="formula">{{ formula|e }}</textarea>
    <button type="submit">Convert</button>
  </form>
  {% if result %}<h3>Converted:</h3><pre>{{ result|e }}</pre>{% endif %}
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/sql/sql.min.js"></script>
<script>
 const ta=document.getElementById('txt');
 const ed=CodeMirror.fromTextArea(ta,{lineNumbers:!0,mode:"sql",theme:"default"});
 document.getElementById('fm').addEventListener('submit',()=>ta.value=ed.getValue());
</script></body></html>
'''

@app.route("/", methods=["GET", "POST"])
def home():
    formula = result = ""
    if request.method == "POST":
        formula = request.form.get("formula", "")
        result  = convert_alteryx(formula)
    return render_template_string(HTML, formula=formula, result=result)

if __name__ == "__main__":
    app.run(debug=True)