let
    Source = Log_Status,    // Your Log_Status table

    Add_Error_Log = Table.AddColumn(Source, "Error_Log", each 
        let
            errorText = [Error],
            jobName = [Job Name],

            // Step 1: Clean the Error text (replace line breaks, tabs, multiple spaces)
            cleanedText = 
                if errorText <> null then
                    Text.Replace(Text.Replace(Text.Replace(Text.Replace(errorText, "#(cr,lf)", " "), "#(lf)", " "), "#(cr)", " "), "#(tab)", " ")
                else
                    "",

            cleanedText2 = Text.Combine(List.Select(Text.Split(cleanedText, " "), each _ <> ""), " "),  // remove extra spaces

            // Step 2: Split into words
            wordList = 
                if cleanedText2 <> null then 
                    Text.SplitAny(cleanedText2, " ,;:.") 
                else 
                    {},

            // Step 3: Find words starting with "ToolId"
            toolIdWords = 
                List.Select(wordList, each Text.StartsWith(Text.Trim(_), "ToolId")),

            // Step 4: Process each ToolId
            transformToolIds = 
                List.Transform(toolIdWords, each 
                    let
                        toolIdFull = Text.Trim(_),               // like "ToolId 2501"
                        toolIdNumber = try Number.FromText(Text.Trim(Text.AfterDelimiter(toolIdFull, "ToolId"))) otherwise null,  // only 2501
                        filteredTool = 
                            if toolIdNumber <> null then 
                                Table.SelectRows(ToolList, each [Job Name] = jobName and [Tool ID] = toolIdNumber) 
                            else 
                                null,
                        toolNameFound = 
                            if filteredTool <> null and Table.RowCount(filteredTool) > 0 
                            then filteredTool{0}[Tool Name] 
                            else null,
                        replacementText = 
                            if toolNameFound <> null 
                            then toolIdFull & " (Tool Name- " & toolNameFound & ")" 
                            else toolIdFull
                    in
                        [Original = toolIdFull, Replacement = replacementText]
                ),

            // Step 5: Replace ToolIds with ToolId + ToolName in original error text (preserving formatting)
            updatedError = 
                List.Accumulate(transformToolIds, errorText, (state, current) => Text.Replace(state, current[Original], current[Replacement]))
        in
            updatedError
    )
in
    Add_Error_Log