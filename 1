def parent_child(self):
    self.logger.info("~ Starting parent_child...")

    try:
        # ✅ Step 1: Build code → level map from 'Niv 1' to 'Niv 6'
        code_to_level = {}

        niv_columns = ['Niv 1', 'Niv 2', 'Niv 3', 'Niv 4', 'Niv 5', 'Niv 6']

        for level, col in enumerate(niv_columns, start=1):
            if col in self.SubProduct.columns:
                for val in self.SubProduct[col]:
                    if pd.notna(val):
                        code = str(val).strip()
                        code_to_level[code] = level

        self.logger.info(f"~ Loaded hierarchy from Niv 1 to Niv 6 with {len(code_to_level)} codes")

        # ✅ Step 2: Logic to check if Code1 is child of Code2
        def check_parent_child(row):
            code1 = str(row['SubProductIAS']).strip()
            code2 = str(row['Type of operation']).strip()

            level1 = code_to_level.get(code1)
            level2 = code_to_level.get(code2)

            if level1 is None or level2 is None:
                return False

            return level1 > level2  # Code1 is child of Code2

        # ✅ Step 3: Apply check on each row
        self.result3['parent_match'] = self.result3.apply(check_parent_child, axis=1)

        # ✅ Step 4: Split into ABC and XYZ
        self.result3A = self.result3[self.result3['parent_match']].copy()
        self.result3B = self.result3[~self.result3['parent_match']].copy()

        self.logger.info(f"~ Matches (ABC): {len(self.result3A)} | Non-matches (XYZ): {len(self.result3B)}")
        self.logger.info("~ parent_child completed successfully.")

    except Exception as e:
        self.logger.error(f"~ Error in parent_child: {e}")
        raise