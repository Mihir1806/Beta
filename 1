def parent_child(self):
    # Step 1: Build code_to_level mapping from SubProduct table
    code_to_level = {}
    for i in range(1, 7):  # Niv 1 to Niv 6
        niv_col = f'Niv {i}'
        if niv_col in self.SubProduct.columns:
            for idx, val in self.SubProduct[niv_col].items():
                code = self.SubProduct.at[idx, 'Code']
                if pd.notna(code) and pd.notna(val):
                    code_to_level[str(code).strip()] = i

    # Step 2: Define a helper function to check parent-child relationship
    def is_child(row):
        code1 = str(row['SubProductIAS']).strip()
        code2 = str(row['Type of operation']).strip()
        level1 = code_to_level.get(code1)
        level2 = code_to_level.get(code2)
        return level1 is not None and level2 is not None and level1 > level2

    # Step 3: Apply logic to self.result3 and split into result3A and result3B
    self.result3['is_child'] = self.result3.apply(is_child, axis=1)
    self.result3A = self.result3[self.result3['is_child']].drop(columns=['is_child'])
    self.result3B = self.result3[~self.result3['is_child']].drop(columns=['is_child'])