def parent_child(self):
    import pandas as pd

    # 🚧 Validate expected columns
    required_cols = ['Code', 'Niv 1', 'Niv 2', 'Niv 3', 'Niv 4', 'Niv 5', 'Niv 6']
    if not all(col in self.SubProduct.columns for col in required_cols):
        raise ValueError("Missing one or more required columns in SubProduct: " + ", ".join(required_cols))

    if not all(col in self.result3.columns for col in ['SubProductIAS', 'Type of operation']):
        raise ValueError("Missing 'SubProductIAS' or 'Type of operation' columns in result3")

    # 🧠 Step 1: Build a code-to-level mapping from Niv 1–6
    code_to_level = {}
    for _, row in self.SubProduct.iterrows():
        code = str(row['Code']).strip() if pd.notna(row['Code']) else None
        if not code:
            continue
        for i in range(1, 7):
            niv_col = f'Niv {i}'
            if pd.notna(row.get(niv_col, None)):
                code_to_level[code] = i
                break  # Stop at the first non-null Niv for this Code

    # 🔍 Step 2: Function to check if one code is child of another
    def is_child(row):
        code1 = str(row['SubProductIAS']).strip()
        code2 = str(row['Type of operation']).strip()
        level1 = code_to_level.get(code1)
        level2 = code_to_level.get(code2)

        # 🎯 If both levels are known, check hierarchy
        if level1 is not None and level2 is not None:
            return level1 > level2  # child if deeper in hierarchy
        return False  # If any code not found, assume no relationship

    # 🧪 Step 3: Apply logic to check parent-child relationship
    self.result3 = self.result3.assign(
        parent_match=self.result3.apply(is_child, axis=1)
    )

    # 📤 Step 4: Split into matched and unmatched sets
    self.result3A = self.result3[self.result3['parent_match']].drop(columns=['parent_match'])
    self.result3B = self.result3[~self.result3['parent_match']].drop(columns=['parent_match'])

    print("✅ parent_child function completed:")
    print(f"  - Matches found: {len(self.result3A)}")
    print(f"  - Non-matches: {len(self.result3B)}")