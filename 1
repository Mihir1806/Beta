let
    errorText = [Error],  // Original error text
    jobName = [Job Name],  // Job name to filter the tool list

    // Step 1: Break Error Text into Words
    wordList = 
        if errorText <> null then 
            Text.SplitAny(errorText, " ,;:.") 
        else 
            {},

    // Step 2: Pick only words that start with "ToolId"
    toolIdWords = 
        List.Select(wordList, each Text.StartsWith(Text.Trim(_), "ToolId")),

    // Step 3: Extract the numeric part of the Tool ID from ToolList
    toolListFiltered = 
        Table.SelectRows(ToolList, each Text.Trim([Job Name]) = Text.Trim(jobName)),  // Trim Job Name for comparison
    toolIdToNameList = 
        List.Transform(toolListFiltered[Tool ID], each 
            [ToolId = Text.From([Tool ID]), ToolName = Text.Trim([Tool Name])]),  // Keep Tool ID as text, and trim Tool Name

    // Step 4: Extract just the numeric part of the Tool ID for comparison
    transformToolIds = 
        List.Transform(toolIdWords, each 
            let
                toolIdFull = Text.Trim(_),   // "ToolId 2501"
                toolIdNumber = Text.Trim(Text.AfterDelimiter(toolIdFull, "ToolId ")), // Extract just "2501"
                numericToolId = Text.Select(toolIdNumber, {"0".."9"}), // Extract digits only
                
                // Custom lookup function to find the Tool Name using only the numeric part of the Tool ID
                toolNameFound = 
                    let
                        matchedTool = List.First(List.Select(toolIdToNameList, each Text.Select(_[ToolId], {"0".."9"}) = numericToolId), null)
                    in
                        if matchedTool <> null then matchedTool[ToolName] else null,

                replacementText = if toolNameFound <> null then toolIdFull & " (Tool Name - " & toolNameFound & ")" else toolIdFull
            in
                [Original = toolIdFull, Replacement = replacementText]
        ),

    // Step 5: Replace Tool IDs with their corresponding Tool Names in the error text
    updatedError = 
        List.Accumulate(transformToolIds, errorText, (state, current) => Text.Replace(state, current[Original], current[Replacement]))
in
    updatedError