IF IsNull([Col1]) THEN "Col1 is null" ELSE "" ENDIF
+ IIF(IsNull([Col2]), IIF(IsEmpty([Comment]), "Col2 is null", ", Col2 is null"), "")
+ IIF(IsNull([Col3]), IIF(IsEmpty([Comment]), "Col3 is null", ", Col3 is null"), "")
+ IIF(IsNull([Col4]), IIF(IsEmpty([Comment]), "Col4 is null", ", Col4 is null"), "")
+ IIF(IsNull([Col5]), IIF(IsEmpty([Comment]), "Col5 is null", ", Col5 is null"), "")
+ IIF(IsNull([Col6]), IIF(IsEmpty([Comment]), "Col6 is null", ", Col6 is null"), "")
+ IIF(IsNull([Col7]), IIF(IsEmpty([Comment]), "Col7 is null", ", Col7 is null"), "")





Build a complete Python application using Flask with the following features:

‚∏ª

üîç Functional Requirements:
	1.	HTML Frontend (Embedded in Python)
	‚Ä¢	A clean, minimal HTML form served from Flask.
	‚Ä¢	Allows user to:
	‚Ä¢	Upload an Alteryx workflow log file (text or Excel).
	‚Ä¢	Upload the corresponding dataset file (Excel/CSV).
	‚Ä¢	Submit for analysis.
	‚Ä¢	After submission, show:
	‚Ä¢	Workflow Run Time
	‚Ä¢	Success or Failure
	‚Ä¢	If failure:
	‚Ä¢	Tool that failed (ToolId and name)
	‚Ä¢	Column involved (e.g., a ‚ÄòDate‚Äô column)
	‚Ä¢	Exact row(s) and values that caused failure
	‚Ä¢	AI-generated explanation of the root cause
	‚Ä¢	Suggested fix using NLP/ML
	2.	Python Backend
	‚Ä¢	Use Flask to handle routing and file uploads.
	‚Ä¢	Parse Alteryx log file:
	‚Ä¢	Extract ToolId, tool name, error messages.
	‚Ä¢	Determine if the workflow failed and what caused it.
	‚Ä¢	Read dataset:
	‚Ä¢	Identify type mismatches in columns (e.g., strings in a Date column).
	‚Ä¢	Pinpoint bad rows and values.
	‚Ä¢	Use AI/NLP logic:
	‚Ä¢	Use sentence-transformers or GPT to generate natural-language root cause and fix suggestions.
	‚Ä¢	Log the result to a central log file (CSV or Excel), capturing:
	‚Ä¢	Workflow Name/ID
	‚Ä¢	Timestamp
	‚Ä¢	Status (Success / Failed)
	‚Ä¢	Errors Found
	‚Ä¢	Suggested Fix Summary

‚∏ª

üì¶ Output Requirements:
	‚Ä¢	Put everything (Flask app, HTML frontend, and logic) into a single .py file.
	‚Ä¢	Do not use CSS files or JS ‚Äî just simple but visually clean HTML with good structure (use <div>, <table>, <hr>, etc.).
	‚Ä¢	Use Python packages:
	‚Ä¢	pandas, re, datetime, openpyxl
	‚Ä¢	Optionally: sentence-transformers or openai for NLP suggestions
	‚Ä¢	The HTML should still look clean and usable ‚Äî you can use inline HTML structure, <fieldset>, <h3>, etc., to organize layout.

‚∏ª

üß† Bonus:
	‚Ä¢	Include error handling.
	‚Ä¢	Add a ‚ÄúDownload Report‚Äù button to export results as Excel.
	‚Ä¢	Automatically name the log file based on the uploaded workflow or timestamp.

‚∏ª

Please generate the complete working code for this ‚Äî one Python file only, including the embedded HTML and backend logic.