from flask import Flask, render_template_string, request
import re

app = Flask(__name__)

HTML = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Ultimate Alteryx â†’ SparkSQL Converter</title>
    <style>
        body { background-color: #121212; color: #eee; font-family: Consolas, monospace; padding: 20px; }
        textarea, pre { width: 100%; background-color: #1f1f1f; color: #00ffcc; border: none; padding: 10px; font-size: 16px; }
        button { background: #00ffcc; border: none; padding: 10px 20px; font-weight: bold; cursor: pointer; margin-top: 10px; }
        h1 { color: #ff4081; }
    </style>
</head>
<body>
    <h1>ðŸ§  Ultimate Alteryx Formula â†’ Spark SQL Converter</h1>
    <form method="POST">
        <textarea name="input_formula" rows="10" placeholder="Paste your complex Alteryx formula here...">{{ input_formula or '' }}</textarea><br>
        <button type="submit">ðŸš€ Convert</button>
    </form>
    {% if output_sql %}
    <h3>âœ¨ Converted Spark SQL:</h3>
    <pre>{{ output_sql }}</pre>
    {% endif %}
</body>
</html>
'''

def convert_alteryx_to_spark_sql(formula):
    formula = formula.replace("\r\n", "\n").replace("\r", "\n")
    lines = formula.strip().split("\n")
    output = []
    stack = []

    def convert_function(line):
        conversions = {
            r"\bToNumber\(": "CAST(",
            r"\bToString\(": "CAST(",
            r"\bToDate\(": "CAST(",
            r"\bToBoolean\(": "CAST(",
            r"\bISNULL\(": "ISNULL(",
            r"\bREGEX_Replace\(": "REGEXP_REPLACE(",
            r"\bREGEX_Match\(": "REGEXP_LIKE(",
            r"\bFINDSTRING\(": "INSTR(",
            r"\bDateDiff\(": "DATEDIFF(",
            r"\bDateTimeAdd\(": "DATE_ADD(",
            r"\bDateTimeDiff\(": "DATEDIFF(",
            r"\bNOW\(\)": "CURRENT_TIMESTAMP()",
            r"\bDateTimeNow\(\)": "CURRENT_TIMESTAMP()",
            r"\bLEFT\(": "SUBSTRING(",
            r"\bRIGHT\(": "SUBSTRING(",
        }

        for pattern, replacement in conversions.items():
            line = re.sub(pattern, replacement, line, flags=re.IGNORECASE)

        # Adjust CASTs
        line = re.sub(r"CAST\((.*?)\)", lambda m: _convert_cast(m.group(1)), line)

        return line

    def _convert_cast(inner):
        if "ToString" in inner:
            return f"CAST({inner.replace('ToString(', '').rstrip(')')} AS STRING)"
        elif "ToNumber" in inner:
            return f"CAST({inner.replace('ToNumber(', '').rstrip(')')} AS DOUBLE)"
        elif "ToDate" in inner:
            return f"CAST({inner.replace('ToDate(', '').rstrip(')')} AS DATE)"
        elif "ToBoolean" in inner:
            return f"CAST({inner.replace('ToBoolean(', '').rstrip(')')} AS BOOLEAN)"
        return f"CAST({inner} AS STRING)"

    for line in lines:
        stripped = line.strip()

        if stripped.upper().startswith("IF "):
            condition = convert_function(stripped[3:].split(" THEN ")[0])
            result = stripped.split(" THEN ")[1].strip('"')
            output.append("CASE")
            output.append(f"  WHEN {condition} THEN '{result}'")
            stack.append("CASE")
        elif stripped.upper().startswith("ELSEIF "):
            condition = convert_function(stripped[7:].split(" THEN ")[0])
            result = stripped.split(" THEN ")[1].strip('"')
            output.append(f"  WHEN {condition} THEN '{result}'")
        elif stripped.upper().startswith("ELSE"):
            result = convert_function(stripped[5:].strip('"'))
            output.append(f"  ELSE '{result}'")
        elif stripped.upper() == "ENDIF":
            if stack and stack[-1] == "CASE":
                output.append("END")
                stack.pop()
        else:
            output.append(convert_function(stripped))

    return "\n".join(output)

@app.route("/", methods=["GET", "POST"])
def index():
    input_formula = ""
    output_sql = ""
    if request.method == "POST":
        input_formula = request.form["input_formula"]
        output_sql = convert_alteryx_to_spark_sql(input_formula)
    return render_template_string(HTML, input_formula=input_formula, output_sql=output_sql)

if __name__ == "__main__":
    app.run(debug=True)