let
    StatusList = Text.Split([LOG_STATUS], ";"),
    MappedList = List.Transform(StatusList, each 
        try Record.Field(
            Table.SelectRows(ToolList, (r) => Text.Lower(r[JT]) = Text.Lower(_)){0}, "id-Name"
        ) otherwise "Not Found"
    ),
    Output = Text.Combine(MappedList, ";")
in
    Output










let
    // Reference the main table and ToolList table
    MainTable = YourMainTable, // Replace with your main table name
    ToolList = ToolList, // Replace with your ToolList table name

    // Split the JT values from the Error1 column by "; "
    JT_Split = Text.Split([Error1], ";"),

    // Lookup corresponding ID_Name for each JT value from ToolList
    ReplaceWithIDName = List.Transform(JT_Split, each 
        let
            // Remove any extra spaces from each ToolId
            trimmedJT = Text.Trim(_),
            // Lookup the matching row in the ToolList table
            matchedRow = Table.SelectRows(ToolList, (row) => row[JT] = trimmedJT),
            // Get the ID_Name from the matched row, or leave blank if not found
            IDName = if Table.IsEmpty(matchedRow) then "" else matchedRow{0}[ID_Name]
        in
            IDName
    ),
    
    // Combine the replaced ID_Name values into one string with "; "
    Result = Text.Combine(ReplaceWithIDName, "; ")
in
    Result







let
    // Reference the Job Name column
    JobName = [Job Name],
    
    // Check if Error1 is blank
    result = if Text.Trim([Error1]) = "" then "" 
             else
                // Split the Error1 column by semicolon to get individual ToolIds
                let
                    extractedToolIds = Text.Split([Error1], ";"),

                    // Remove any extra spaces and trim ToolIds
                    trimmedToolIds = List.Transform(extractedToolIds, each Text.Trim(_)),

                    // Combine Job Name with each ToolId (e.g., "xyz-210")
                    combined = List.Transform(trimmedToolIds, each JobName & "-" & _),

                    // Join the combined values with "; "
                    output = Text.Combine(combined, "; ")
                in
                    output
in
    result


let
    // Reference the Job Name column
    JobName = [Job Name],

    // Split the Error1 column by semicolon to get individual ToolIds
    extractedToolIds = Text.Split([Error1], ";"),

    // Remove any extra spaces and trim ToolIds
    trimmedToolIds = List.Transform(extractedToolIds, each Text.Trim(_)),

    // Combine Job Name with each ToolId (e.g., "xyz-210")
    combined = List.Transform(trimmedToolIds, each JobName & "-" & _),

    // Join the combined values with "; "
    result = Text.Combine(combined, "; ")
in
    result





let
    parts = Text.Split([Error1], "ToolId "),
    extracted = List.Transform(
        List.Skip(parts, 1),
        each Text.BeforeDelimiter(Text.TrimStart(_), ":")
    ),
    distinctValues = List.Distinct(extracted),
    combined = List.Transform(distinctValues, each [Job Name] & "-" & _)
in
    Text.Combine(combined, "; ")






let
    parts = Text.Split([Error1], "ToolId "),
    extracted = List.Transform(
        List.Skip(parts, 1),
        each Text.BeforeDelimiter(Text.TrimStart(_), ":")
    )
in
    Text.Combine(extracted, "; ")




let
    parts = Text.Split([Error1], "ToolId "),
    extracted = List.Transform(
        List.Skip(parts, 1),
        each Text.BeforeDelimiter(Text.TrimStart(_), ":")
    ),
    distinctValues = List.Distinct(extracted)
in
    Text.Combine(distinctValues, "; ")






let
    Source = YourSourceTable,
    // Extract first ToolId
    AddedFirstToolId = Table.AddColumn(Source, "FirstToolId", each 
        let matches = Text.Matches([Error1], "ToolId\s*(\d+)")
        in if List.Count(matches) > 0 then matches{0}[Value] else null),
    // Extract all ToolIds as comma-separated string
    AddedAllToolIds = Table.AddColumn(AddedFirstToolId, "AllToolIds", each 
        Text.Combine(ExtractToolIds([Error1]), ", "))
in
    AddedAllToolIds









let
    // Split the Error1 column by "ToolId"
    SplitText = Text.Split([Error1], "ToolId"),
    // Skip the first part of the split since it won't contain any numbers
    ExtractNumbers = List.Transform(List.Skip(SplitText, 1), 
        each Text.Start(Text.AfterDelimiter(_, ":"), Text.PositionOf(Text.AfterDelimiter(_, ":"), " "))),
    // Combine all the extracted numbers, separated by commas
    Result = Text.Combine(ExtractNumbers, ", ")
in
    Result










let
    SplitText = Text.Split([LOG_STATUS], "ToolId"),
    ExtractNumbers = List.Transform(List.Skip(SplitText, 1), each Text.Start(_, Text.PositionOf(_, ":"))),
    Result = Text.Combine(ExtractNumbers, ", ")
in
    Result












let
    // Load your table (replace with your actual table name)
    Source = YourTableName,  // Replace YourTableName with your actual table name

    // Transform the Error column to replace line breaks (LF and CR) with semicolons
    CleanedErrorColumn = Table.TransformColumns(Source, {"Error", each Text.Replace(Text.Replace(_, "#(lf)", "; "), "#(cr)", "; "), type text})

in
    CleanedErrorColumn






Text.Replace(Text.Replace([Error], "#(lf)", "; "), "#(cr)", "; ")




let
    // Step 1: Define your LOG_STATUS and ToolList tables (replace with your actual table names)
    LOG_STATUS = ... ,  // Your LOG_STATUS table here
    ToolList = ... ,  // Your ToolList table here

    // Step 2: Extract ToolIds from the Error column
    ExtractToolIds = Table.AddColumn(LOG_STATUS, "ExtractedToolIds", each 
        Text.Split(Text.Select([Error], {"0".."9", " "}), " "), type list),

    // Step 3: Replace ToolIds with the corresponding Custom values from ToolList
    ReplaceToolIdsWithCustom = Table.AddColumn(ExtractToolIds, "UpdatedError", each 
        Text.Combine(
            List.Transform([ExtractedToolIds], (toolId) => 
                let
                    // Find the corresponding Custom value from ToolList for the ToolId
                    customValue = try 
                        List.First(Table.SelectRows(ToolList, each Text.From([Tool ID]) = toolId)[Custom]) 
                        otherwise toolId
                in
                    customValue
            ), " "
        )
    )
in
    ReplaceToolIdsWithCustom





