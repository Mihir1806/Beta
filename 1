def parent_child(self):
    self.logger.info("Starting parent_child...")

    try:
        # Define hierarchy levels from Table B
        levels = ['niv1', 'niv2', 'niv3', 'niv4', 'niv5', 'niv6']

        # Build index mapping of each code to its row index in SubProduct
        code_index_map = {
            str(code).strip(): idx for idx, code in enumerate(self.SubProduct['code']) if pd.notna(code)
        }

        # Get values of all levels
        level_values = self.SubProduct[levels].values

        def check_parent_child(row):
            descendant = str(row['SubProductIAS']).strip()
            ancestor = str(row['Type of operation']).strip()

            # If descendant not in SubProduct codes, return False
            if descendant not in code_index_map:
                return False

            # Get row index for descendant in SubProduct
            desc_idx = code_index_map[descendant]
            lvl_idx = -1

            # Determine the level index of the descendant (niv1 to niv6)
            for i in range(len(levels)):
                if pd.notna(level_values[desc_idx][i]) and str(level_values[desc_idx][i]).strip() == descendant:
                    lvl_idx = i
                    break

            # If level not found, return False
            if lvl_idx == -1:
                return False

            # Check upward for ancestor in previous levels (niv1 to niv(lvl_idx - 1))
            for parent_level_idx in range(lvl_idx - 1, -1, -1):
                parent_code = level_values[desc_idx][parent_level_idx]
                if pd.notna(parent_code) and str(parent_code).strip() == ancestor:
                    return True

            return False

        # Copy and process self.result3
        self.result3['parent_match'] = self.result3.apply(check_parent_child, axis=1)

        # Split ABC (child of) and XYZ (not child of)
        self.result3A = self.result3[self.result3['parent_match']]
        self.result3B = self.result3[~self.result3['parent_match']]

        self.logger.info("parent_child completed successfully.")

    except Exception as e:
        self.logger.error(f"Error in parent_child: {e}")
        raise