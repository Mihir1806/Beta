import streamlit as st
import pandas as pd
import datetime
import webbrowser
from datetime import timedelta

# Load data from Excel
@st.cache_data
def load_data():
    return pd.read_excel("job_status_report.xlsx")

df = load_data()
df['Received_Date'] = pd.to_datetime(df['Received_Date']).dt.date  # Ensure date format

# --- Widget UI ---
st.set_page_config(layout="wide")
st.title("ðŸ“Š Job Analytics Dashboard")

# --- Sidebar Filters ---
with st.sidebar:
    st.header("Filters")
    date_filter = st.radio("Date Range", ["Today", "7 Days", "30 Days", "Custom Range"])
    
    if date_filter == "Custom Range":
        start_date = st.date_input("Start Date", datetime.date.today() - timedelta(days=30))
        end_date = st.date_input("End Date", datetime.date.today())
    else:
        start_date, end_date = None, None

# Apply date filter
today = datetime.date.today()
filtered_df = df.copy()

if date_filter == "Today":
    filtered_df = df[df['Received_Date'] == today]
elif date_filter == "7 Days":
    filtered_df = df[df['Received_Date'] >= today - timedelta(days=7)]
elif date_filter == "30 Days":
    filtered_df = df[df['Received_Date'] >= today - timedelta(days=30)]
elif date_filter == "Custom Range" and start_date and end_date:
    filtered_df = df[(df['Received_Date'] >= start_date) & (df['Received_Date'] <= end_date)]

# --- Status Summary Widget ---
st.subheader("Job Status Overview")
success_count = len(filtered_df[filtered_df['Status'] == 'Success'])
failure_count = len(filtered_df[filtered_df['Status'] == 'Failure'])
total_count = len(filtered_df)

# Create columns for the status widgets
col1, col2, col3 = st.columns(3)

# Success Widget
with col1:
    st.markdown(f"""
    <div style='background-color: #4CAF50; padding: 20px; border-radius: 10px; text-align: center; color: white;'>
        <h3>Success</h3>
        <h2>{success_count}</h2>
    </div>
    """, unsafe_allow_html=True)
    if st.button("View Success Jobs", key="success"):
        filtered_df = filtered_df[filtered_df['Status'] == 'Success']

# Failure Widget
with col2:
    st.markdown(f"""
    <div style='background-color: #F44336; padding: 20px; border-radius: 10px; text-align: center; color: white;'>
        <h3>Failure</h3>
        <h2>{failure_count}</h2>
    </div>
    """, unsafe_allow_html=True)
    if st.button("View Failure Jobs", key="failure"):
        filtered_df = filtered_df[filtered_df['Status'] == 'Failure']

# Total Widget
with col3:
    st.markdown(f"""
    <div style='background-color: #2196F3; padding: 20px; border-radius: 10px; text-align: center; color: white;'>
        <h3>Total</h3>
        <h2>{total_count}</h2>
    </div>
    """, unsafe_allow_html=True)
    if st.button("View All Jobs", key="total"):
        filtered_df = filtered_df  # Reset filter

# --- Job Details Table ---
st.subheader("Job Details")

# Convert 'Path' to clickable hyperlinks
def make_clickable(path):
    if pd.notna(path):
        if path.startswith(('http:', 'https:')):  # SharePoint/URL
            return f'<a href="{path}" target="_blank" style="color: #2196F3;">ðŸ”— Open</a>'
        else:  # Local path
            return f'<a href="file:///{path}" target="_blank" style="color: #2196F3;">ðŸ”— Open</a>'
    return "N/A"

filtered_df['Path'] = filtered_df['Path'].apply(make_clickable)

# Display styled table
st.write(
    filtered_df[['Job_Name', 'Status', 'Execution_Time', 'Path']].to_html(
        escape=False, 
        index=False,
        classes='styled-table',
        justify='left'
    ),
    unsafe_allow_html=True
)

# Add CSS for table styling
st.markdown("""
<style>
.styled-table {
    width: 100%;
    border-collapse: collapse;
    margin: 25px 0;
    font-size: 0.9em;
    font-family: sans-serif;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
}
.styled-table thead tr {
    background-color: #2196F3;
    color: white;
    text-align: left;
}
.styled-table th, .styled-table td {
    padding: 12px 15px;
}
.styled-table tbody tr {
    border-bottom: 1px solid #dddddd;
}
.styled-table tbody tr:nth-of-type(even) {
    background-color: #f3f3f3;
}
.styled-table tbody tr:last-of-type {
    border-bottom: 2px solid #2196F3;
}
</style>
""", unsafe_allow_html=True)