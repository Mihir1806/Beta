def parent_child(self):
    self.logger.info("Starting parent_child...")

    try:
        # 🔁 Build code → level mapping from Table B (self.SubProduct)
        code_to_level = {}

        for i in range(1, 7):
            col_name = f'niv{i}'
            if col_name in self.SubProduct.columns:
                for code in self.SubProduct[col_name]:
                    if pd.notna(code):
                        code_to_level[str(code).strip()] = i

        # 🧠 Define the parent-child checker
        def check_parent_child(row):
            code1 = str(row['SubProductIAS']).strip()  # child
            code2 = str(row['Type of operation']).strip()  # parent

            level1 = code_to_level.get(code1)
            level2 = code_to_level.get(code2)

            # ✅ Code1 is child of Code2 if level1 > level2
            if level1 and level2 and level1 > level2:
                return True
            return False

        # 🧪 Apply logic to full table
        self.result3['parent_match'] = self.result3.apply(check_parent_child, axis=1)

        # ✂️ Split into ABC and XYZ
        self.result3A = self.result3[self.result3['parent_match']]
        self.result3B = self.result3[~self.result3['parent_match']]

        self.logger.info("parent_child completed successfully.")

    except Exception as e:
        self.logger.error(f"Error in parent_child: {e}")
        raise