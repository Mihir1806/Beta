-- Convert Position Date if stored as string
WITH formatted_data AS (
    SELECT 
        [Master Account Number],
        [Sub Account Number],
        CAST(CONVERT(date, SUBSTRING([Position Date], 5, 4) + SUBSTRING([Position Date], 3, 2) + SUBSTRING([Position Date], 1, 2), 112) AS DATE) AS Position_Date,
        [Total Outstanding (RM) - CIR]
    FROM account_positions
),

-- Get the two latest Position Dates
latest_two_dates AS (
    SELECT DISTINCT TOP 2 Position_Date
    FROM formatted_data
    ORDER BY Position_Date DESC
)

-- Final comparison
SELECT *
FROM formatted_data
WHERE Position_Date IN (SELECT Position_Date FROM latest_two_dates)
ORDER BY [Sub Account Number], Position_Date;




SELECT *
FROM (
  SELECT *, TO_DATE("Date Picker", 'DDMMYYYY') AS dt
  FROM AccountsTable
  WHERE LENGTH("Date Picker") = 8
) AS formatted
WHERE (
  DATE_TRUNC('month', dt) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')
  AND "Account Number" NOT IN (
    SELECT "Account Number"
    FROM AccountsTable
    WHERE LENGTH("Date Picker") = 8
      AND DATE_TRUNC('month', TO_DATE("Date Picker", 'DDMMYYYY')) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month')
  )
)
OR (
  DATE_TRUNC('month', dt) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month')
  AND "Account Number" NOT IN (
    SELECT "Account Number"
    FROM AccountsTable
    WHERE LENGTH("Date Picker") = 8
      AND DATE_TRUNC('month', TO_DATE("Date Picker", 'DDMMYYYY')) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')
  )
);






WITH formatted AS (
  SELECT *, 
         TRY_CAST(CONVERT(date, STUFF(STUFF("Date Picker", 5, 0, '-'), 3, 0, '-') ) AS date) AS dt
  FROM AccountsTable
  WHERE LEN("Date Picker") = 8
),
dates AS (
  SELECT 
    EOMONTH(GETDATE(), -1) AS last_month,
    EOMONTH(GETDATE(), -2) AS before_last_month
),
lm AS (
  SELECT f.*
  FROM formatted f, dates d
  WHERE EOMONTH(f.dt) = d.last_month
),
blm AS (
  SELECT f.*
  FROM formatted f, dates d
  WHERE EOMONTH(f.dt) = d.before_last_month
)
SELECT * FROM lm
WHERE "Account Number" NOT IN (SELECT "Account Number" FROM blm)
UNION ALL
SELECT * FROM blm
WHERE "Account Number" NOT IN (SELECT "Account Number" FROM lm);





WITH formatted AS (
  SELECT *, TO_DATE("Date Picker", 'DDMMYYYY') AS dt
  FROM AccountsTable
),
lm AS (
  SELECT * FROM formatted
  WHERE DATE_TRUNC('month', dt) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')
),
blm AS (
  SELECT * FROM formatted
  WHERE DATE_TRUNC('month', dt) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month')
)
SELECT * FROM lm
WHERE "Account Number" NOT IN (SELECT "Account Number" FROM blm)
UNION ALL
SELECT * FROM blm
WHERE "Account Number" NOT IN (SELECT "Account Number" FROM lm);






WITH 
Formatted AS (
    SELECT *,
           TO_DATE("Date Picker", 'DDMMYYYY') AS formatted_date
    FROM AccountsTable
),

LastMonth AS (
    SELECT * 
    FROM Formatted
    WHERE DATE_TRUNC('month', formatted_date) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')
),

BeforeLastMonth AS (
    SELECT * 
    FROM Formatted
    WHERE DATE_TRUNC('month', formatted_date) = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month')
),

OnlyInLastMonth AS (
    SELECT lm.*
    FROM LastMonth lm
    LEFT JOIN BeforeLastMonth blm
        ON lm."Account Number" = blm."Account Number"
    WHERE blm."Account Number" IS NULL
),

OnlyInBeforeLastMonth AS (
    SELECT blm.*
    FROM BeforeLastMonth blm
    LEFT JOIN LastMonth lm
        ON blm."Account Number" = lm."Account Number"
    WHERE lm."Account Number" IS NULL
)

SELECT * FROM OnlyInLastMonth
UNION ALL
SELECT * FROM OnlyInBeforeLastMonth;






WITH 
LastMonth AS (
    SELECT * 
    FROM AccountsTable
    WHERE DATE_TRUNC('month', "Date Picker") = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')
),
BeforeLastMonth AS (
    SELECT * 
    FROM AccountsTable
    WHERE DATE_TRUNC('month', "Date Picker") = DATE_TRUNC('month', CURRENT_DATE - INTERVAL '2 month')
),

OnlyInLastMonth AS (
    SELECT lm.*
    FROM LastMonth lm
    LEFT JOIN BeforeLastMonth blm
        ON lm."Account Number" = blm."Account Number"
    WHERE blm."Account Number" IS NULL
),

OnlyInBeforeLastMonth AS (
    SELECT blm.*
    FROM BeforeLastMonth blm
    LEFT JOIN LastMonth lm
        ON blm."Account Number" = lm."Account Number"
    WHERE lm."Account Number" IS NULL
)

SELECT * FROM OnlyInLastMonth
UNION ALL
SELECT * FROM OnlyInBeforeLastMonth;












SELECT DISTINCT account
FROM account_table
WHERE DATE_TRUNC('month', date) = DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '2 month'
  AND account NOT IN (
    SELECT DISTINCT account
    FROM account_table
    WHERE DATE_TRUNC('month', date) = DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month'
  );


let
    logText = [Complete Log],
    splitByTable = Text.Split(logText, "Table:"),
    lastBlock = if List.Count(splitByTable) > 1 then List.Last(splitByTable) else "",
    lastSet = Text.BeforeDelimiter(lastBlock, "End of Table"),
    cleaned = Text.Trim(lastSet)
in
    cleaned


= Table.AddColumn(YourPreviousStepName, "JobFrequency", each 
    if Text.Contains([jobname], "_Daily_") or Text.Contains([jobname], "_D_") then "Daily" 
    else if Text.Contains([jobname], "_Monthly_") or Text.Contains([jobname], "_M_") then "Monthly" 
    else "Other")



let
    error1 = [Erromi],
    result =
        if error1 = null then
            null
        else
            let
                parts = Text.Split(error1, "*ToolId "),
                extracted = List.Transform(
                    List.Skip(parts, 1),
                    each Text.BeforeDelimiter(Text.TrimStart(_), "'")
                ),
                distinctValues = List.Distinct(extracted)
            in
                Text.Combine(distinctValues, " * ")
in
    result





Stage 1: Web Basics (Beginner Level)

Duration: 2–3 weeks

Learn:
	•	HTML: Structure, tags, forms, inputs, tables, semantic elements
	•	CSS: Styling, selectors, box model, Flexbox, Grid, media queries
	•	JavaScript (Basics): Variables, data types, conditionals, loops, DOM manipulation, events

Practice Projects:
	•	Build a personal resume webpage
	•	Create a contact form with validation
	•	Make a color picker or interactive gallery

⸻

Stage 2: Core JavaScript (Intermediate Level)

Duration: 3–4 weeks

Learn:
	•	Arrays, objects, functions, ES6+ (let/const, arrow functions, destructuring)
	•	DOM traversal & manipulation
	•	Event handling, form validation
	•	Async JavaScript: Promises, fetch, async/await
	•	Browser APIs: LocalStorage, Fetch API

Practice Projects:
	•	Todo List App
	•	Weather App using OpenWeather API
	•	Simple Calculator
	•	Notes App (store notes in localStorage)

⸻

Stage 3: TypeScript (Advanced Intermediate Level)

Duration: 2–3 weeks

Learn:
	•	Type annotations, interfaces, union types
	•	Type-safe functions, generics
	•	Classes, access modifiers
	•	TypeScript with DOM
	•	TypeScript with modules

Practice:
	•	Convert a JavaScript project (like Todo App) to TypeScript
	•	Create a small app using only TypeScript for strict typing

⸻

Stage 4: Angular Fundamentals (Advanced Level)

Duration: 4–6 weeks

Learn:
	•	Angular CLI and project structure
	•	Components, templates, and data binding
	•	Directives, pipes, lifecycle hooks
	•	Routing and navigation
	•	Services and dependency injection
	•	Angular Forms (template-driven & reactive)
	•	HTTPClient and API integration
	•	Angular Material (UI toolkit)

Practice Projects:
	•	Job Dashboard (with filters and forms)
	•	CRUD Application (Create, Read, Update, Delete)
	•	Small e-commerce site or blog

⸻

Stage 5: Angular Mastery (Expert Level)

Duration: 6–8 weeks+

Learn:
	•	State management (RxJS, BehaviorSubject, or NgRx)
	•	Lazy loading and modular architecture
	•	Advanced forms and custom validators
	•	Route guards and authentication
	•	Unit testing and integration testing
	•	Performance optimization (ChangeDetectionStrategy, OnPush)
	•	App deployment and environment configs

Capstone Project:
	•	Build and deploy a real-world, multi-page Angular app with login, dashboard, dynamic content, and API integration





=AVERAGEIFS(
  Data!M2:M100,
  Data!D2:D100,"<=31-Jan-2024",
  Data!G2:G100,">=01-Jan-2024"
)



=IFERROR(
  SUMPRODUCT(
    --(Data!D2:D100<=DATE(2024,1,31)),
    --(IF(Data!G2:G100="", TODAY(), Data!G2:G100)>=DATE(2024,1,1)),
    MIN(IF(Data!G2:G100="", TODAY(), Data!G2:G100), DATE(2024,2,1)-1) - MAX(Data!D2:D100, DATE(2024,1,1)) + 1
  ) /
  SUMPRODUCT(
    --(Data!D2:D100<=DATE(2024,1,31)),
    --(IF(Data!G2:G100="", TODAY(), Data!G2:G100)>=DATE(2024,1,1))
  ),
  0
)



=MAX(0, MIN(G2, DATE(YEAR(D2), 2, 1) - 1) - MAX(D2, DATE(YEAR(D2), 1, 1)) + 1)



=MAX(0, MIN(G2, DATE(YEAR(D2), 2, 1) - 1) - MAX(D2, DATE(YEAR(D2), 1, 1)) + 1)


=IF((G2 - D2) > L2, IF(DATEDIF(D2, G2, "m")=0, G2 - D2, (G2 - D2) / DATEDIF(D2, G2, "m")), "")




=IF((Y1 - X1) > AA1, IF(DATEDIF(X1, Y1, "m")=0, Y1 - X1, (Y1 - X1) / DATEDIF(X1, Y1, "m")), "")


let
    Output = if Text.Trim([Error3]) = "" then
        ""
    else
        let
            StatusList = List.Transform(Text.Split([Error3], ";"), each Text.Trim(_)),
            MappedList = List.Transform(
                StatusList, 
                each try 
                    Record.Field(
                        Table.SelectRows(ToolList, (r) => Text.Lower(r[JT]) = Text.Lower(_)){0}, 
                        "ID-Name"
                    ) 
                otherwise 
                    "Not Found"
            )
        in
            Text.Combine(MappedList, ";")
in
    Output









let
    StatusList = Text.Split([LOG_STATUS], ";"),
    MappedList = List.Transform(StatusList, each 
        try Record.Field(
            Table.SelectRows(ToolList, (r) => Text.Lower(r[JT]) = Text.Lower(_)){0}, "id-Name"
        ) otherwise "Not Found"
    ),
    Output = Text.Combine(MappedList, ";")
in
    Output










let
    // Reference the main table and ToolList table
    MainTable = YourMainTable, // Replace with your main table name
    ToolList = ToolList, // Replace with your ToolList table name

    // Split the JT values from the Error1 column by "; "
    JT_Split = Text.Split([Error1], ";"),

    // Lookup corresponding ID_Name for each JT value from ToolList
    ReplaceWithIDName = List.Transform(JT_Split, each 
        let
            // Remove any extra spaces from each ToolId
            trimmedJT = Text.Trim(_),
            // Lookup the matching row in the ToolList table
            matchedRow = Table.SelectRows(ToolList, (row) => row[JT] = trimmedJT),
            // Get the ID_Name from the matched row, or leave blank if not found
            IDName = if Table.IsEmpty(matchedRow) then "" else matchedRow{0}[ID_Name]
        in
            IDName
    ),
    
    // Combine the replaced ID_Name values into one string with "; "
    Result = Text.Combine(ReplaceWithIDName, "; ")
in
    Result







let
    // Reference the Job Name column
    JobName = [Job Name],
    
    // Check if Error1 is blank
    result = if Text.Trim([Error1]) = "" then "" 
             else
                // Split the Error1 column by semicolon to get individual ToolIds
                let
                    extractedToolIds = Text.Split([Error1], ";"),

                    // Remove any extra spaces and trim ToolIds
                    trimmedToolIds = List.Transform(extractedToolIds, each Text.Trim(_)),

                    // Combine Job Name with each ToolId (e.g., "xyz-210")
                    combined = List.Transform(trimmedToolIds, each JobName & "-" & _),

                    // Join the combined values with "; "
                    output = Text.Combine(combined, "; ")
                in
                    output
in
    result


let
    // Reference the Job Name column
    JobName = [Job Name],

    // Split the Error1 column by semicolon to get individual ToolIds
    extractedToolIds = Text.Split([Error1], ";"),

    // Remove any extra spaces and trim ToolIds
    trimmedToolIds = List.Transform(extractedToolIds, each Text.Trim(_)),

    // Combine Job Name with each ToolId (e.g., "xyz-210")
    combined = List.Transform(trimmedToolIds, each JobName & "-" & _),

    // Join the combined values with "; "
    result = Text.Combine(combined, "; ")
in
    result





let
    parts = Text.Split([Error1], "ToolId "),
    extracted = List.Transform(
        List.Skip(parts, 1),
        each Text.BeforeDelimiter(Text.TrimStart(_), ":")
    ),
    distinctValues = List.Distinct(extracted),
    combined = List.Transform(distinctValues, each [Job Name] & "-" & _)
in
    Text.Combine(combined, "; ")






let
    parts = Text.Split([Error1], "ToolId "),
    extracted = List.Transform(
        List.Skip(parts, 1),
        each Text.BeforeDelimiter(Text.TrimStart(_), ":")
    )
in
    Text.Combine(extracted, "; ")




let
    parts = Text.Split([Error1], "ToolId "),
    extracted = List.Transform(
        List.Skip(parts, 1),
        each Text.BeforeDelimiter(Text.TrimStart(_), ":")
    ),
    distinctValues = List.Distinct(extracted)
in
    Text.Combine(distinctValues, "; ")






let
    Source = YourSourceTable,
    // Extract first ToolId
    AddedFirstToolId = Table.AddColumn(Source, "FirstToolId", each 
        let matches = Text.Matches([Error1], "ToolId\s*(\d+)")
        in if List.Count(matches) > 0 then matches{0}[Value] else null),
    // Extract all ToolIds as comma-separated string
    AddedAllToolIds = Table.AddColumn(AddedFirstToolId, "AllToolIds", each 
        Text.Combine(ExtractToolIds([Error1]), ", "))
in
    AddedAllToolIds









let
    // Split the Error1 column by "ToolId"
    SplitText = Text.Split([Error1], "ToolId"),
    // Skip the first part of the split since it won't contain any numbers
    ExtractNumbers = List.Transform(List.Skip(SplitText, 1), 
        each Text.Start(Text.AfterDelimiter(_, ":"), Text.PositionOf(Text.AfterDelimiter(_, ":"), " "))),
    // Combine all the extracted numbers, separated by commas
    Result = Text.Combine(ExtractNumbers, ", ")
in
    Result










let
    SplitText = Text.Split([LOG_STATUS], "ToolId"),
    ExtractNumbers = List.Transform(List.Skip(SplitText, 1), each Text.Start(_, Text.PositionOf(_, ":"))),
    Result = Text.Combine(ExtractNumbers, ", ")
in
    Result












let
    // Load your table (replace with your actual table name)
    Source = YourTableName,  // Replace YourTableName with your actual table name

    // Transform the Error column to replace line breaks (LF and CR) with semicolons
    CleanedErrorColumn = Table.TransformColumns(Source, {"Error", each Text.Replace(Text.Replace(_, "#(lf)", "; "), "#(cr)", "; "), type text})

in
    CleanedErrorColumn






Text.Replace(Text.Replace([Error], "#(lf)", "; "), "#(cr)", "; ")




let
    // Step 1: Define your LOG_STATUS and ToolList tables (replace with your actual table names)
    LOG_STATUS = ... ,  // Your LOG_STATUS table here
    ToolList = ... ,  // Your ToolList table here

    // Step 2: Extract ToolIds from the Error column
    ExtractToolIds = Table.AddColumn(LOG_STATUS, "ExtractedToolIds", each 
        Text.Split(Text.Select([Error], {"0".."9", " "}), " "), type list),

    // Step 3: Replace ToolIds with the corresponding Custom values from ToolList
    ReplaceToolIdsWithCustom = Table.AddColumn(ExtractToolIds, "UpdatedError", each 
        Text.Combine(
            List.Transform([ExtractedToolIds], (toolId) => 
                let
                    // Find the corresponding Custom value from ToolList for the ToolId
                    customValue = try 
                        List.First(Table.SelectRows(ToolList, each Text.From([Tool ID]) = toolId)[Custom]) 
                        otherwise toolId
                in
                    customValue
            ), " "
        )
    )
in
    ReplaceToolIdsWithCustom





