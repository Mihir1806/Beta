def parent_child(self):
    import pandas as pd

    # Step 1: Create code to level mapping from self.SubProduct
    code_to_level = {}
    for _, row in self.SubProduct.iterrows():
        code = str(row['Code']).strip() if pd.notna(row['Code']) else None
        if not code:
            continue
        for i in range(1, 7):
            niv_col = f'Niv {i}'
            if pd.notna(row[niv_col]):
                code_to_level[code] = i  # Save the level

    # Step 2: Define check function
    def check_parent_child(row):
        code1 = str(row['SubProductIAS']).strip()
        code2 = str(row['Type of operation']).strip()
        level1 = code_to_level.get(code1)
        level2 = code_to_level.get(code2)

        if level1 is not None and level2 is not None:
            return level1 > level2  # code1 is child of code2
        return False

    # Step 3: Apply check
    self.result3.loc[:, 'parent_match'] = self.result3.apply(check_parent_child, axis=1)

    # Step 4: Split result3 into result3A and result3B
    self.result3A = self.result3[self.result3['parent_match']].drop(columns=['parent_match'])
    self.result3B = self.result3[~self.result3['parent_match']].drop(columns=['parent_match'])

    print("âœ… Done! Split into result3A (ABC) and result3B (XYZ).")