
from flask import Flask, request, render_template_string
import re

app = Flask(__name__)

def convert_date_format(fmt):
    replacements = {
        "%Y": "yyyy", "%y": "yy", "%m": "MM", "%d": "dd",
        "%H": "HH", "%M": "mm", "%S": "ss"
    }
    for k, v in replacements.items():
        fmt = fmt.replace(k, v)
    return fmt

def handle_datetime_add(date_expr, num, unit):
    num = int(num)
    unit = unit.lower()
    if unit == 'days':
        return f"date_add({date_expr}, {num})" if num >= 0 else f"date_sub({date_expr}, {abs(num)})"
    elif unit == 'months':
        return f"add_months({date_expr}, {num})"
    elif unit == 'years':
        return f"add_months({date_expr}, {num * 12})"
    else:
        return f"{date_expr}"

def convert_formula(expr):
    prev_expr = None
    while expr != prev_expr:
        prev_expr = expr

        expr = re.sub(r'DateTimeNow\s*\(\s*\)', "current_timestamp()", expr, flags=re.I)
        expr = re.sub(r'DateTimeToday\s*\(\s*\)', "current_date()", expr, flags=re.I)

        expr = re.sub(r'DateTimeFirstOfMonth\s*\(\s*\)', "date_trunc('month', current_date())", expr, flags=re.I)
        expr = re.sub(r'DateTimeFirstOfMonth\s*\(\s*([^)]+?)\s*\)', r"date_trunc('month', \1)", expr, flags=re.I)

        expr = re.sub(r'DateTimeFormat\s*\(\s*([^\s,]+)\s*,\s*"([^"]+)"\s*\)',
                      lambda m: f"date_format({m.group(1)}, '{convert_date_format(m.group(2))}')", expr, flags=re.I)

        expr = re.sub(r'DateTimeAdd\s*\(\s*([^,]+?)\s*,\s*(-?\d+)\s*,\s*["\'](days|months|years)["\']\s*\)',
                      lambda m: handle_datetime_add(m.group(1), m.group(2), m.group(3)), expr, flags=re.I)

        expr = re.sub(r'\bTrim\s*\(\s*([^)]+?)\)', r'TRIM(\1)', expr, flags=re.I)
        expr = re.sub(r'\bLeft\s*\(\s*([^,]+?)\s*,\s*([^)]+?)\)', r'SUBSTRING(\1, 1, \2)', expr, flags=re.I)
        expr = re.sub(r'\bRight\s*\(\s*([^,]+?)\s*,\s*([^)]+?)\)', r'SUBSTRING(\1, LENGTH(\1)-\2+1, \2)', expr, flags=re.I)
        expr = re.sub(r'Contains\s*\(\s*([^,]+)\s*,\s*([^)]+)\)', r'INSTR(\1, \2) > 0', expr, flags=re.I)
        expr = re.sub(r'I{1,2}F{1,2}\s*\(\s*([^,]+?)\s*,\s*([^,]+?)\s*,\s*([^)]+?)\)', r'CASE WHEN \1 THEN \2 ELSE \3 END', expr, flags=re.I)

    return expr

HTML = '''
<!doctype html>
<html>
<head>
    <title>Alteryx â‡Œ Spark SQL</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/codemirror.min.css">
    <style>
        body { background:#1f1f2e; color:#eee; font-family:sans-serif; padding:40px; }
        .container { max-width:900px; margin:auto }
        h1 { color:#00f0ff; text-align:center }
        textarea, pre { width:100%; background:#2d2d3a; color:#fff; border:1px solid #444; padding:10px; font-size:16px; border-radius:6px }
        button { padding:10px 20px; font-size:16px; background:#00cec9; border:none; margin-top:10px; cursor:pointer }
    </style>
</head>
<body>
<div class="container">
    <h1>ðŸ§  Alteryx â‡Œ Spark SQL Formula Converter</h1>
    <form method="POST">
        <textarea id="input" name="formula" rows="4" placeholder="Type your Alteryx formula here...">{{ formula|e }}</textarea>
        <button type="submit">Convert</button>
    </form>
    {% if result %}
        <h3>Converted Formula:</h3>
        <pre id="output">{{ result|e }}</pre>
    {% endif %}
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/sql/sql.min.js"></script>
<script>
    CodeMirror.fromTextArea(document.getElementById("input"), {
        lineNumbers: true, mode: "sql", theme: "default"
    });
</script>
</body>
</html>
'''

@app.route("/", methods=["GET", "POST"])
def index():
    formula = result = ""
    if request.method == "POST":
        formula = request.form.get("formula", "")
        result = convert_formula(formula)
    return render_template_string(HTML, formula=formula, result=result)

if __name__ == "__main__":
    app.run(debug=True)