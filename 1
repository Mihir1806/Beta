import pandas as pd

class HierarchyChecker:
    def __init__(self):
        # 🔽 Table B (SubProduct) – Each code appears at a specific Niv level
        self.SubProduct = pd.DataFrame({
            'Code': ['G00000', 'G02100', 'G02200', 'X05000', 'X05100', 'X05200',
                     'C04000', 'C04100', 'C04200', 'C04300', 'C04600', 'C04400'],
            'Niv 1': ['A', '', '', 'X', '', '', 'Q', '', '', '', '', ''],
            'Niv 2': ['', 'B', '', '', 'Y', '', '', 'E', '', '', '', ''],
            'Niv 3': ['', '', 'C', '', '', 'Z', '', '', 'E', '', '', ''],
            'Niv 4': ['', '', '', '', '', '', '', '', '', 'R', '', ''],
            'Niv 5': ['', '', '', '', '', '', '', '', '', '', 'T', ''],
            'Niv 6': ['', '', '', '', '', '', '', '', '', '', '', 'U']
        })

        # 🔽 Table A (result3) – Pairs of codes
        self.result3 = pd.DataFrame({
            'SubProductIAS': ['G02100', 'G02200', 'G02200', 'G00000', 'X05200',
                              'X05100', 'X05000', 'C04400', 'C04600', 'C04300',
                              'C04200', 'C04100', 'C04000', 'X05200'],
            'Type of operation': ['G00000', 'G02100', 'G00000', 'G02200', 'X05100',
                                  'X05000', 'X05200', 'C04600', 'C04300', 'C04200',
                                  'C04100', 'C04000', 'C04400', 'C04100']
        })

    def parent_child(self):
        try:
            # 🔁 Create code → level map from SubProduct
            code_to_level = {}
            for i in range(1, 7):
                niv_col = f'Niv {i}'
                for idx, code in self.SubProduct['Code'].items():
                    if pd.notna(self.SubProduct.at[idx, niv_col]) and code not in code_to_level:
                        code_to_level[code.strip()] = i

            # 🧠 Logic to check parent-child
            def check_parent_child(row):
                code1 = str(row['SubProductIAS']).strip()
                code2 = str(row['Type of operation']).strip()
                level1 = code_to_level.get(code1)
                level2 = code_to_level.get(code2)
                return level1 is not None and level2 is not None and level1 > level2

            # 🔍 Apply logic to each row
            self.result3['parent_match'] = self.result3.apply(check_parent_child, axis=1)

            # 🟩 Save matches (child of) → result3A, others → result3B
            self.result3A = self.result3[self.result3['parent_match']].copy()
            self.result3B = self.result3[~self.result3['parent_match']].copy()

            print("✅ Classification completed. Matches in result3A, non-matches in result3B.")

        except Exception as e:
            print(f"❌ Error in parent_child function: {e}")