from flask import Flask, request, render_template_string
import re

app = Flask(__name__)

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ format helpers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
_STRF_TO_SPARK = {
    "%Y": "yyyy", "%y": "yy", "%m": "MM", "%d": "dd",
    "%H": "HH",   "%M": "mm", "%S": "ss"
}

def to_spark_fmt(fmt: str) -> str:
    for k, v in _STRF_TO_SPARK.items():
        fmt = fmt.replace(k, v)
    return fmt

def spark_dt_add(expr: str, n: int, unit: str) -> str:
    u = unit.lower()
    if u.startswith("day"):
        return f"date_add({expr}, {n})" if n >= 0 else f"date_sub({expr}, {-n})"
    if u.startswith("month"):
        return f"add_months({expr}, {n})"
    if u.startswith("year"):
        return f"add_months({expr}, {n * 12})"
    return expr  # hours/minutes not implemented for Spark safely

def spark_dt_diff(a: str, b: str, unit: str) -> str:
    u = unit.lower()
    if u.startswith("day"):
        return f"DATEDIFF({a}, {b})"
    if u.startswith("month"):
        return f"MONTHS_BETWEEN({a}, {b})"
    if u.startswith("year"):
        return f"(MONTHS_BETWEEN({a}, {b})/12)"
    return f"DATEDIFF({a}, {b})"

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ regexes â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
BAL_ARG = r'(?:[^(),]|\([^()]*\))+?'  # balanced arg (quick & safe)
RX_ADD  = re.compile(
    rf'DateTimeAdd\(\s*({BAL_ARG})\s*,\s*(-?\d+)\s*,\s*[\'"](days|months|years)[\'"]\s*\)',
    flags=re.I)
RX_DIFF = re.compile(
    rf'DateTimeDiff\(\s*({BAL_ARG})\s*,\s*({BAL_ARG})\s*,\s*[\'"](days|months|years)[\'"]\s*\)',
    flags=re.I)

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ conversion function (recursive) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def convert(expr: str) -> str:
    txt = expr.strip()

    # 1 â”€ replace constants & simple renames first
    txt = re.sub(r'DateTimeNow\(\)',  'current_timestamp()', txt, flags=re.I)
    txt = re.sub(r'DateTimeToday\(\)', 'current_date()',     txt, flags=re.I)
    txt = re.sub(r'DateTimeFirstOfMonth\(\)', "date_trunc('month', current_date())", txt, flags=re.I)
    txt = re.sub(r'DateTimeFirstOfMonth\(\s*([^)]+?)\s*\)', r"date_trunc('month', \1)", txt, flags=re.I)

    # Trim / Len
    txt = re.sub(r'\bTrim\s*\(\s*([^)]+?)\)',  r'TRIM(\1)',   txt, flags=re.I)
    txt = re.sub(r'\bLen\s*\(\s*([^)]+?)\)',   r'LENGTH(\1)', txt, flags=re.I)

    # 2 â”€ DateTimeFormat
    txt = re.sub(
        r'DateTimeFormat\(\s*([^\s,]+?)\s*,\s*"([^"]+)"\s*\)',
        lambda m: f"date_format({m.group(1)}, '{to_spark_fmt(m.group(2))}')",
        txt, flags=re.I)

    # 3 â”€ Recursive DateTimeAdd / DateTimeDiff
    while True:
        m_add = RX_ADD.search(txt)
        m_diff = RX_DIFF.search(txt)
        if not m_add and not m_diff:
            break
        if m_add and (not m_diff or m_add.start() < m_diff.start()):
            inner = convert(m_add.group(1))
            txt = txt.replace(m_add.group(0),
                              spark_dt_add(inner, int(m_add.group(2)), m_add.group(3)), 1)
        else:
            a = convert(m_diff.group(1))
            b = convert(m_diff.group(2))
            txt = txt.replace(m_diff.group(0),
                              spark_dt_diff(a, b, m_diff.group(3)), 1)

    # 4 â”€ String helpers & Contains
    txt = re.sub(r'I{1,2}F{1,2}\(\s*([^,]+?),\s*([^,]+?),\s*([^)]+?)\)',
                 r'CASE WHEN \1 THEN \2 ELSE \3 END', txt, flags=re.I)

    txt = re.sub(r'\bIf\s+(.+?)\s+Then\s+(.+?)\s+Else\s+(.+?)\s+EndIf\b',
                 r'CASE WHEN \1 THEN \2 ELSE \3 END', txt, flags=re.I|re.S)

    txt = re.sub(r'Contains\(\s*([^,]+?)\s*,\s*([^)]+?)\)', r'INSTR(\1,\2) > 0', txt, flags=re.I)
    txt = re.sub(r'\bLeft\(\s*([^,]+?)\s*,\s*([^)]+?)\)',  r'SUBSTRING(\1,1,\2)', txt, flags=re.I)
    txt = re.sub(r'\bRight\(\s*([^,]+?)\s*,\s*([^)]+?)\)',
                 r'SUBSTRING(\1,LENGTH(\1)-\2+1,\2)', txt, flags=re.I)

    return txt

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€  Flask UI  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
HTML = '''
<!doctype html><html><head><title>Alteryxâ‡„Spark SQL</title>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/codemirror.min.css">
<style>
body{background:#181826;color:#eee;font-family:Arial;padding:40px}
.wrap{max-width:900px;margin:auto}h1{text-align:center;color:#00e0ff}
textarea,pre{width:100%;background:#27273a;color:#fff;border:1px solid #555;
padding:12px;border-radius:6px;font-size:15px}
button{padding:10px 24px;font-size:16px;background:#00ceb8;border:none;margin-top:12px;cursor:pointer}
</style></head><body><div class="wrap">
<h1>ðŸ§  Alteryx â‡„ Spark SQL Converter</h1>
<form method="POST"><textarea id="code" name="formula" rows="4">{{ src|e }}</textarea>
<button type="submit">Convert</button></form>{% if out %}
<h3>Converted:</h3><pre>{{ out }}</pre>{% endif %}
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/sql/sql.min.js"></script>
<script>
const ed=CodeMirror.fromTextArea(document.getElementById('code'),
  {lineNumbers:true,mode:'sql',theme:'default'});
document.querySelector('form').addEventListener('submit',()=>{document.getElementById('code').value=ed.getValue();});
</script></body></html>
'''

@app.route("/", methods=["GET","POST"])
def root():
    src = out = ""
    if request.method == "POST":
        src = request.form.get("formula","")
        out = convert(src)
    return render_template_string(HTML, src=src, out=out)

if __name__ == "__main__":
    app.run(debug=True)